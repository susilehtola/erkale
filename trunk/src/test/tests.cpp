#include "basislibrary.h"
#include "global.h"
#include "mathf.h"
#include "scf.h"
#include "timer.h"
#include "xyzutils.h"

#include <cmath>
#include <cstdio>

/// Relative tolerance in total energy
double tol=1e-7;
/// Absolute tolerance in orbital energies
double otol=1e-5;

/// To compute references instead of running tests
//#define COMPUTE_REFERENCE

double rel_diff(double x, double y) {
  return (x-y)/y;
}

/// Check if \f$ | (x - y)/y | < \tau \f$
bool compare(double x, double y, double tau) {
  // Compute relative difference
  double d=rel_diff(x,y);
  
  if(fabs(d)<tau) {
    //    printf("%e vs %e, difference %e, ok\n",x,y,d);
    return 1;
  } else {
    //    printf("%e vs %e, difference %e, fail\n",x,y,d);
    return 0;
  }
}

bool compare(const arma::vec & x, const arma::vec & y, double tau, size_t & nsucc, size_t & nfail) {
  if(x.n_elem!=y.n_elem)
    throw std::runtime_error("Error - differing amount of computed and reference orbital energies!\n");

  size_t N=min(x.n_elem,y.n_elem);

  nsucc=0;
  nfail=0;

  bool ok=1;
  for(size_t i=0;i<N;i++) {
    double d=x(i)-y(i);

    if(fabs(d)>tau) {
      //      printf("%e vs %e, difference %e, fail\n",x(i),y(i),d);
      ok=0;
      nfail++;
    } else {
      //      printf("%e vs %e, difference %e, ok\n",x(i),y(i),d);
      nsucc++;
    }
  }
 
  return ok;
}

double max_diff(const arma::vec & x, const arma::vec & y) {
  if(x.n_elem!=y.n_elem)
    throw std::runtime_error("Error - differing amount of computed and reference orbital energies!\n");
  
  double m=0;
  for(size_t i=0;i<x.n_elem;i++) {
    double d=fabs(x(i)-y(i));
    if(d>m)
      m=d;
  }

  return m;
}

atom_t convert_to_bohr(const atom_t & in) {
  atom_t ret=in;

  ret.x*=ANGSTROMINBOHR;
  ret.y*=ANGSTROMINBOHR;
  ret.z*=ANGSTROMINBOHR;

  return ret;
}

// Possible statuses
const char * stat[]={"fail","ok"};

void rhf_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorb, const std::string & label) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec E;
  arma::mat C;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.RHF(C,E);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorb=\"");
  for(size_t i=0;i<E.n_elem;i++)
    printf("%.16e ",E(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucc=0, nfail=0;
  compare(E,Eorb,otol,nsucc,nfail); // Compare orbital energies
  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energy is %e.\n",rel_diff(Et,Etot),max_diff(E,Eorb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    fflush(stdout);
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

void uhf_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorba, const arma::vec & Eorbb, const std::string & label) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec Ea, Eb;
  arma::mat Ca, Cb;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.UHF(Ca,Cb,Ea,Eb);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorba=\"");
  for(size_t i=0;i<Ea.n_elem;i++)
    printf("%.16e ",Ea(i));
  printf("\";\n");
  printf("Eorbb=\"");
  for(size_t i=0;i<Eb.n_elem;i++)
    printf("%.16e ",Eb(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucca=0, nfaila=0;
  size_t nsuccb=0, nfailb=0;
  compare(Ea,Eorba,otol,nsucca,nfaila); // Compare orbital energies
  compare(Eb,Eorbb,otol,nsuccb,nfailb); // Compare orbital energies
  size_t nsucc=nsucca+nsuccb;
  size_t nfail=nfaila+nfailb;

  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energies are %e and %e.\n",rel_diff(Et,Etot),max_diff(Ea,Eorba),max_diff(Eb,Eorbb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

void rdft_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorb, const std::string & label, int xfunc, int cfunc) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec E;
  arma::mat C;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.RDFT(C,E,xfunc,cfunc);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorb=\"");
  for(size_t i=0;i<E.n_elem;i++)
    printf("%.16e ",E(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucc=0, nfail=0;
  compare(E,Eorb,otol,nsucc,nfail); // Compare orbital energies
  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energy is %e.\n",rel_diff(Et,Etot),max_diff(E,Eorb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

void udft_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorba, const arma::vec & Eorbb, const std::string & label, int xfunc, int cfunc) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec Ea, Eb;
  arma::mat Ca, Cb;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.UDFT(Ca,Cb,Ea,Eb,xfunc,cfunc);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorba=\"");
  for(size_t i=0;i<Ea.n_elem;i++)
    printf("%.16e ",Ea(i));
  printf("\";\n");
  printf("Eorbb=\"");
  for(size_t i=0;i<Eb.n_elem;i++)
    printf("%.16e ",Eb(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucca=0, nfaila=0;
  size_t nsuccb=0, nfailb=0;
  compare(Ea,Eorba,otol,nsucca,nfaila); // Compare orbital energies
  compare(Eb,Eorbb,otol,nsuccb,nfailb); // Compare orbital energies
  size_t nsucc=nsucca+nsuccb;
  size_t nfail=nfaila+nfailb;

  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energies are %e and %e.\n",rel_diff(Et,Etot),max_diff(Ea,Eorba),max_diff(Eb,Eorbb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

/// Run unit tests by comparing calculations to ones that should be OK
int main(void) {
  // Load basis sets

  printf("****** Loading basis sets *******\n");

  BasisSetLibrary b3_21G;
  b3_21G.load_gaussian94("3-21G");

  BasisSetLibrary cc_pVDZ;
  cc_pVDZ.load_gaussian94("cc-pVDZ");

  BasisSetLibrary cc_pVTZ;
  cc_pVTZ.load_gaussian94("cc-pVTZ");

  BasisSetLibrary cc_pVQZ;
  cc_pVQZ.load_gaussian94("cc-pVQZ");

  BasisSetLibrary aug_cc_pVDZ;
  aug_cc_pVDZ.load_gaussian94("aug-cc-pVDZ");

  BasisSetLibrary DZPd;
  DZPd.load_gaussian94("DZP+diffuse");

  /*
  BasisSetLibrary cc_pV5Z;
  cc_pV5Z.load_gaussian94("cc-pV5Z");

  BasisSetLibrary cc_pV6Z;
  cc_pV6Z.load_gaussian94("cc-pV6Z");

  BasisSetLibrary aug_cc_pVTZ;
  aug_cc_pVTZ.load_gaussian94("aug-cc-pVTZ");

  BasisSetLibrary aug_cc_pVQZ;
  aug_cc_pVQZ.load_gaussian94("aug-cc-pVQZ");
  */
  
  // Helper structure
  atom_t at;

  // Oxygen atom
  std::vector<atom_t> O;
  at.el="O"; at.x=0.0; at.y=0.0; at.z=0.0; O.push_back(convert_to_bohr(at));

  // Water monomer optimized at B3LYP/aug-cc-pVTZ level
  std::vector<atom_t> h2o;
  at.el="O"; at.x= 0.000000; at.y= 0.117030; at.z=0.000000; h2o.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.763404; at.y=-0.468123; at.z=0.000000; h2o.push_back(convert_to_bohr(at));
  at.el="H"; at.x=-0.763404; at.y=-0.468123; at.z=0.000000; h2o.push_back(convert_to_bohr(at));

  // Cadmium complex
  std::vector<atom_t> cdcplx;
  at.el="Cd"; at.x= 0.000000; at.y= 0.000000; at.z= 0.000000; cdcplx.push_back(convert_to_bohr(at));
  at.el="N";  at.x= 0.000000; at.y= 0.000000; at.z=-2.260001; cdcplx.push_back(convert_to_bohr(at));
  at.el="N";  at.x=-0.685444; at.y= 0.000000; at.z=-4.348035; cdcplx.push_back(convert_to_bohr(at));
  at.el="C";  at.x= 0.676053; at.y= 0.000000; at.z=-4.385069; cdcplx.push_back(convert_to_bohr(at));
  at.el="C";  at.x= 1.085240; at.y= 0.000000; at.z=-3.091231; cdcplx.push_back(convert_to_bohr(at));
  at.el="C";  at.x=-1.044752; at.y= 0.000000; at.z=-3.060220; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x= 1.231530; at.y= 0.000000; at.z=-5.300759; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x= 2.088641; at.y= 0.000000; at.z=-2.711077; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x=-2.068750; at.y= 0.000000; at.z=-2.726515; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x=-1.313170; at.y= 0.000000; at.z=-5.174718; cdcplx.push_back(convert_to_bohr(at));

  // 1-decanol
  std::vector<atom_t> decanol;
  at.el="C"; at.x= 3.951300; at.y= 3.953900; at.z= 3.422300; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 5.374200; at.y= 3.650100; at.z= 2.991900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 5.462800; at.y= 3.376900; at.z= 1.498000; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 3.868100; at.y= 4.261800; at.z= 4.909900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 6.848500; at.y= 2.886000; at.z= 1.103900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 2.476900; at.y= 4.734000; at.z= 5.303900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 7.148200; at.y= 1.524300; at.z= 1.712000; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 2.137100; at.y= 6.069500; at.z= 4.659400; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 8.591100; at.y= 1.087300; at.z= 1.479900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 0.698900; at.y= 6.461200; at.z= 4.906200; decanol.push_back(convert_to_bohr(at));
  at.el="O"; at.x= 9.420700; at.y= 1.797400; at.z= 2.371700; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 3.287600; at.y= 3.101000; at.z= 3.176500; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 3.544800; at.y= 4.820400; at.z= 2.851400; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 5.764700; at.y= 2.762000; at.z= 3.541600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.048100; at.y= 4.485600; at.z= 3.267600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 5.215200; at.y= 4.295200; at.z= 0.930600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 4.700900; at.y= 2.627700; at.z= 1.202600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 4.616500; at.y= 5.034600; at.z= 5.179100; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 4.142500; at.y= 3.363300; at.z= 5.496700; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.926800; at.y= 2.833000; at.z= 0.000000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 7.613500; at.y= 3.620500; at.z= 1.424900; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 2.408100; at.y= 4.818800; at.z= 6.406100; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 1.724700; at.y= 3.972500; at.z= 5.015100; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.912400; at.y= 1.558800; at.z= 2.801200; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.470000; at.y= 0.761200; at.z= 1.282600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 2.344300; at.y= 6.002200; at.z= 3.566900; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 2.817300; at.y= 6.856200; at.z= 5.040700; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 8.698800; at.y= 0.000000; at.z= 1.663000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 8.897200; at.y= 1.276900; at.z= 0.431600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.461600; at.y= 7.423200; at.z= 4.435000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.000000; at.y= 5.716800; at.z= 4.502200; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.486000; at.y= 6.559000; at.z= 5.979000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x=10.311700; at.y= 1.558300; at.z= 2.157100; decanol.push_back(convert_to_bohr(at));

  // Construct settings
  Settings sph;
  sph.set_bool("Verbose",0);

  // No spherical harmonics
  Settings cart=sph;
  cart.set_bool("UseLM",0);

  // Polarized calculation
  Settings pol=sph;
  pol.set_int("Charge",1);
  pol.set_int("Multiplicity",2);
  pol.set_bool("UseADIIS",0);

#ifdef DFT_ENABLED
  // DFT tests

  // Settings for DFT
  Settings dftsph=sph; // Normal settings
  dftsph.add_dft_settings();

  Settings dftcart=cart; // Cartesian basis
  dftcart.add_dft_settings();

  Settings dftnofit=dftsph; // No density fitting
  dftnofit.set_bool("DFTFitting",0);

  Settings dftdirect=dftsph; // Direct calculation
  dftdirect.set_bool("Direct",1);
  dftdirect.set_bool("DFTDirect",1);

  Settings dftpol=pol; // Polarized calculation
  dftpol.add_dft_settings();
  dftpol.set_bool("UseADIIS",0);
  dftpol.set_bool("UseBroyden",1);
#endif

  printf("****** Running calculations *******\n");  
  Timer t;

  // Reference total energy
  double Etot;
  // Reference orbital energies
  arma::vec Eorb;
  arma::vec Eorba;
  arma::vec Eorbb;

  // Oxygen, HF, cc-pVDZ
  Etot=-7.4665278726428056e+01;
  Eorb="-2.0699668429305746e+01 -1.2524344055704906e+00 -5.7227047496319350e-01 -5.7227047496318983e-01 9.5299818088128430e-03 1.1361646554023428e+00 1.1361646554023428e+00 1.1867354030039940e+00 1.3655979286585465e+00 2.8659324494165808e+00 2.8750733910794426e+00 2.8750733910794448e+00 2.9026327547131290e+00 2.9026327547131339e+00 ";
  rhf_test(O,cc_pVDZ,sph,Etot,Eorb,"Oxygen, HF/cc-pVDZ");
  
  // Same thing, but in cartesian basis
  Etot=-7.4665341652249595e+01;
  Eorb="-2.0700150573071568e+01 -1.2525283341059998e+00 -5.7239952104172087e-01 -5.7239952104171865e-01 9.4002487921881692e-03 1.1360412695063438e+00 1.1360412695063511e+00 1.1866110121148032e+00 1.2042501265596652e+00 2.8654339936256386e+00 2.8749240213220477e+00 2.8749240213220530e+00 2.9024847901001474e+00 2.9024847901001509e+00 5.4458845250115502e+00 ";
  rhf_test(O,cc_pVDZ,cart,Etot,Eorb,"Oxygen, HF/cc-pVDZ cart");

  // Oxygen, HF, cc-pVTZ
  Etot=-7.4684268595655197e+01;
  Eorb="-2.0701080241863945e+01 -1.2592536718365432e+00 -5.8238193028096241e-01 -5.8237976944939795e-01 -6.0716129946690508e-03 7.4747716854730561e-01 7.4750984841719470e-01 7.8549089599699462e-01 9.1573641975757558e-01 1.6768284861807219e+00 1.6827254426294571e+00 1.6827274046147616e+00 1.7063059550513668e+00 1.7063418698574662e+00 3.9740741994128257e+00 4.0001706032281570e+00 4.0005472213160225e+00 5.4497687068984009e+00 5.4515097606359886e+00 5.4729085084936759e+00 5.4843566232934222e+00 5.4858452885125439e+00 5.5615099921020086e+00 5.5620783634976521e+00 6.5734653124073992e+00 6.5921325403296338e+00 6.5921354155241705e+00 6.6507732252354943e+00 6.6507900055106202e+00 7.5068008274033309e+00 ";
  rhf_test(O,cc_pVTZ,sph,Etot,Eorb,"Oxygen, HF/cc-pVTZ");

  Etot=-7.4684356892528882e+01;
  Eorb="-2.0701536775058809e+01 -1.2595137436165238e+00 -5.8257302456041660e-01 -5.8257302456040994e-01 -7.0450704776825902e-03 5.4358665530308359e-01 7.0312654470985325e-01 7.0312654470987179e-01 7.4062039970009297e-01 1.6753602293710117e+00 1.6825186080030616e+00 1.6825186080030672e+00 1.7061332545246279e+00 1.7061332545246337e+00 2.4722680700878610e+00 3.2663392552319257e+00 3.2743962771753798e+00 3.2743962771756436e+00 5.4346154442115315e+00 5.4470028292994535e+00 5.4470028292994597e+00 5.4840798363016248e+00 5.4840798363016408e+00 5.5459896157797566e+00 5.5459896157797726e+00 6.5734771192420238e+00 6.5918390642532643e+00 6.5918390642532687e+00 6.6504852351698602e+00 6.6504852351698727e+00 6.9515361997236553e+00 7.0434585291730478e+00 7.0434585291737521e+00 1.0235626663273584e+01 1.6315304721718302e+01 ";
  rhf_test(O,cc_pVTZ,cart,Etot,Eorb,"Oxygen, HF/cc-pVTZ cart");

  // Oxygen, HF, cc-pVQZ
  Etot=-7.4689672843416247e+01;
  Eorb="-2.0703820850652416e+01 -1.2613757860610233e+00 -5.8515820401525842e-01 -5.8515626168638679e-01 -1.2773114139443339e-02 5.5661622961439550e-01 5.5663058127836662e-01 5.8788521374436087e-01 5.9191007928788542e-01 1.1933085501962044e+00 1.1986398251507469e+00 1.1986451506247371e+00 1.2201229067780728e+00 1.2201232718269319e+00 2.5890955863581229e+00 2.6097064684889455e+00 2.6102977629201303e+00 3.3389558405156956e+00 3.3417713785367633e+00 3.3458769614753376e+00 3.3704177935649602e+00 3.3709100750466483e+00 3.4202391774223204e+00 3.4204631723940282e+00 3.5414323467402253e+00 4.0175914867490059e+00 4.0312297366452894e+00 4.0312788499335932e+00 4.0787434762931287e+00 4.0787659226596311e+00 9.0267558311359579e+00 9.2013564861642596e+00 9.2041799223646059e+00 9.2333845757742203e+00 9.2345715194220883e+00 9.2746991382936539e+00 9.2778221862902619e+00 9.3070095349844983e+00 9.3371211629771622e+00 1.0169404116113526e+01 1.0238681349281997e+01 1.0239379903715387e+01 1.1336991523005540e+01 1.1341555839089402e+01 1.1366111978452995e+01 1.1379197954245200e+01 1.1383715767166285e+01 1.1478055521749118e+01 1.1479846090152098e+01 1.2352317702769591e+01 1.2377654559953479e+01 1.2377672308733279e+01 1.2455029147334740e+01 1.2455354377885225e+01 4.0522642408279978e+01 ";
  rhf_test(O,cc_pVQZ,sph,Etot,Eorb,"Oxygen, HF/cc-pVQZ");

  Etot=-7.4689715828296229e+01;
  Eorb="-2.0703952880794414e+01 -1.2614956234962647e+00 -5.8522312023719447e-01 -5.8522312023718270e-01 -1.3897555557295202e-02 3.6164281566372314e-01 4.8359788068299114e-01 4.8359788068349535e-01 5.1482865923517329e-01 1.1906629384523224e+00 1.1978440993058239e+00 1.1978440993058435e+00 1.2193416487839022e+00 1.2193416487839137e+00 1.5341864690374116e+00 1.8147913232440758e+00 1.8169278302116920e+00 1.8169278302149063e+00 3.3312137446012406e+00 3.3411101457889334e+00 3.3411101457889525e+00 3.3703143933466282e+00 3.3703143933466584e+00 3.4181364641976621e+00 3.4181364641976772e+00 3.9072895327631274e+00 3.9099510692021449e+00 3.9536552618026781e+00 3.9536552618060137e+00 4.0155445818244342e+00 4.0294090489955527e+00 4.0294090489955785e+00 4.0769950895750586e+00 4.0769950895750791e+00 8.6106719250285515e+00 9.1940185016134421e+00 9.2029174766099349e+00 9.2029174766099686e+00 9.2296300625493544e+00 9.2296300625493721e+00 9.2742052898610456e+00 9.2742052898610652e+00 9.3367360511824504e+00 9.3367360511824860e+00 1.0716113434992034e+01 1.0791985584452901e+01 1.0791985584453323e+01 1.1321009934360756e+01 1.1335435691746344e+01 1.1335435691746392e+01 1.1378849397013628e+01 1.1378849397013676e+01 1.1455413425303213e+01 1.1455413425303238e+01 1.1989400103296067e+01 1.2016038688125050e+01 1.2016038688125763e+01 1.2098734998645313e+01 1.2098734998646725e+01 1.9042245039421747e+01 2.1033406519935131e+01 2.1058049747096206e+01 2.1058049747130351e+01 2.1141460827702613e+01 2.1141460827753402e+01 2.9093638233881713e+01 2.9208807542291503e+01 2.9208807542304289e+01 3.5633212270346213e+01 1.1545321426691261e+02 ";
  rhf_test(O,cc_pVQZ,cart,Etot,Eorb,"Oxygen, HF/cc-pVQZ cart");

  // Oxygen, UHF, cc-pVTZ
  Etot=-7.4187497550270464e+01;
  Eorba="-2.1417486301926001e+01 -1.9159882867091464e+00 -1.3109648115801709e+00 -1.2010944203569116e+00 -5.5460665792729302e-01 2.8175003687797867e-01 3.2027410431722941e-01 3.4313185607358715e-01 4.3731543476115309e-01 1.1366298146706220e+00 1.1387938713352299e+00 1.1638570944150963e+00 1.1864463216364829e+00 1.1919933171273340e+00 3.3167962956822339e+00 3.3839434425740302e+00 3.4022464604726279e+00 4.8340203296812421e+00 4.8405161861261625e+00 4.8823782946761796e+00 4.8830403300239347e+00 4.9244395836988240e+00 4.9422168535279907e+00 4.9457328893816292e+00 5.9044742108458692e+00 5.9052713134212214e+00 5.9642617395407349e+00 5.9814359097732757e+00 5.9970364920258561e+00 6.8828738297817393e+00 ";
  Eorbb="-2.1371794030236099e+01 -1.7343490951745539e+00 -1.1547558553951998e+00 -5.1965191492737739e-01 -4.2856237261468311e-01 3.3066100897314787e-01 3.5617708767345435e-01 4.0484653325367070e-01 4.7423265597465525e-01 1.1893175961073257e+00 1.1915178333493002e+00 1.2172956435623532e+00 1.2417862730837070e+00 1.2469285588444536e+00 3.4041714817614674e+00 3.4251192050220722e+00 3.4919965835267179e+00 4.8888890814062149e+00 4.8965628391913167e+00 4.9125104989126473e+00 4.9253677083282703e+00 4.9316132925058733e+00 4.9975925117331874e+00 5.0010981221537874e+00 5.9844595029931558e+00 5.9987980464276109e+00 6.0181048782898143e+00 6.0783321040211176e+00 6.0798420684259931e+00 6.9334693556643945e+00 ";
  uhf_test(O,cc_pVTZ,pol,Etot,Eorba,Eorbb,"Oxygen, HF/cc-pVTZ polarized");

  printf("\n");

  // Water
  Etot=-7.6056846941492140e+01;
  Eorb="-2.0555336512446136e+01 -1.3429167382449509e+00 -7.0831770497817836e-01 -5.7581634784361757e-01 -5.0395808010501919e-01 1.4187676681805728e-01 2.0351837389142008e-01 5.4325209722579593e-01 5.9743073024741433e-01 6.6902610468331047e-01 7.8618190724898895e-01 8.0264561074431795e-01 8.0477457545814735e-01 8.5895459484528003e-01 9.5696003337862734e-01 1.1369012661203641e+00 1.1927526949086305e+00 1.5238457534432934e+00 1.5568958780903333e+00 2.0323642887776714e+00 2.0594264891496969e+00 2.0653811314862094e+00 2.1684100388512082e+00 2.2356007641932392e+00 2.5930811495622179e+00 2.9554689164925163e+00 3.3611156348999587e+00 3.4906525484143147e+00 3.5741552469566278e+00 3.6466195186854216e+00 3.8098890733441348e+00 3.8721537664289571e+00 3.8807784184569889e+00 3.9569185336285515e+00 3.9987665691432910e+00 4.0736543382360759e+00 4.1801785743668392e+00 4.3092425523822966e+00 4.3760461746849284e+00 4.5715947004936837e+00 4.6348116455461890e+00 4.8596765202504564e+00 5.1402288784775960e+00 5.2874806303149482e+00 5.5463372022724071e+00 6.0424050918362262e+00 6.5330036855353182e+00 6.9016693509017975e+00 6.9365453839677347e+00 6.9802319116329183e+00 7.0182977359694316e+00 7.1338792390135071e+00 7.2154670800292067e+00 7.2255943806766592e+00 7.4235576483656631e+00 7.7211430674544292e+00 8.2697507603910339e+00 1.2755307282278480e+01 ";
  rhf_test(h2o,cc_pVTZ,sph,Etot,Eorb,"Water, HF/cc-pVTZ");

  // Direct calculation
  Settings direct=sph;
  direct.set_bool("Direct",1);
  rhf_test(h2o,cc_pVTZ,direct,Etot,Eorb,"Water, HF/cc-pVTZ direct");

  Etot=-7.6064486129654426e+01;
  Eorb="-2.0560367089109526e+01 -1.3467279568182167e+00 -7.1288511500730278e-01 -5.8000887721643779e-01 -5.0760165036225802e-01 1.1671779483114884e-01 1.7059110123847968e-01 4.4885066011688507e-01 4.6188036064205412e-01 4.9872307651532877e-01 5.8265741487746991e-01 6.0652131922690422e-01 6.1372824489620503e-01 6.5415548062015605e-01 7.1859272733106105e-01 8.5096442812791873e-01 9.1889568173758507e-01 1.1089440946289144e+00 1.1547897315306288e+00 1.3489353402663185e+00 1.4145430573015498e+00 1.4772771446561599e+00 1.4849254787793571e+00 1.5824421691805592e+00 1.6814168730095291e+00 1.9064203205605772e+00 2.0719426282625566e+00 2.1991315378406262e+00 2.2841432952359981e+00 2.3586502540028844e+00 2.4266159668534182e+00 2.4848059337707538e+00 2.5282276224559452e+00 2.5586983013689846e+00 2.5784363635501015e+00 2.6480496032314229e+00 2.6695678001885108e+00 2.8427253086282538e+00 2.8775605689766457e+00 3.0425617277537476e+00 3.1259879424001373e+00 3.2920350641865004e+00 3.3395021114416177e+00 3.4423186460600403e+00 3.6243324529190017e+00 3.7991421477502447e+00 3.9963385439412491e+00 4.1262788555692085e+00 4.1837260583636375e+00 4.2120469565159322e+00 4.4530091223498847e+00 4.4836444639390161e+00 4.6832751515715954e+00 4.7273379538963622e+00 4.7606790946237041e+00 4.9144446771033410e+00 5.3663102729896730e+00 5.4263411150650898e+00 5.9901140304132037e+00 6.0936990062792882e+00 6.2358276597646505e+00 6.3038740260987360e+00 6.6880102703683209e+00 6.7937504089855700e+00 7.0711800468121613e+00 7.2310189186360789e+00 7.2927776929260180e+00 7.3308237076568927e+00 7.3646486749983753e+00 7.5296481586735151e+00 7.6177264372627178e+00 7.7259762385235184e+00 8.0066864804058717e+00 8.0888021479545440e+00 8.1005754437475996e+00 8.1132910683318062e+00 8.1864355198097680e+00 8.2671470042177777e+00 8.3145007738466106e+00 8.3183957276954992e+00 8.4098909990720152e+00 8.5910748696743191e+00 8.9095636024568954e+00 8.9339142525458257e+00 8.9932612618484509e+00 9.1554548063096544e+00 9.2899792393801839e+00 9.3532959309983212e+00 9.9081699788765327e+00 1.0058748516140643e+01 1.0262787785071383e+01 1.0435357070685347e+01 1.0575253929284665e+01 1.0631852878591847e+01 1.0758111734953594e+01 1.1259613028582896e+01 1.1410287470486917e+01 1.1573640505753758e+01 1.1667889983366560e+01 1.1716060748740095e+01 1.1846399334367737e+01 1.2192549636489382e+01 1.2296711077854416e+01 1.2419184466656096e+01 1.2441159733859147e+01 1.2467586333665677e+01 1.3576020916467405e+01 1.3762676881686218e+01 1.4186349626770369e+01 1.4557092137301696e+01 1.4720169030972755e+01 1.4865456867076430e+01 1.6429257202572472e+01 1.6870043606189952e+01 4.4590591574298095e+01 ";
  rhf_test(h2o,cc_pVQZ,sph,Etot,Eorb,"Water, HF/cc-pVQZ");
  // Direct calculation should yield same energies
  rhf_test(h2o,cc_pVQZ,direct,Etot,Eorb,"Water, HF/cc-pVQZ direct");

#ifdef DFT_ENABLED
  Etot=-7.6373040009500698e+01;
  Eorb="-1.8739146525694462e+01 -9.1595065597599112e-01 -4.7162284405342525e-01 -3.2513104405583609e-01 -2.4828714200447385e-01 8.4276128444532167e-03 8.1122977366295326e-02 3.3805164054399350e-01 3.7944648406261333e-01 4.6504842295218191e-01 5.4462136743131884e-01 5.9069528371908131e-01 5.9681283986690015e-01 6.4396655512973966e-01 7.4405281784718147e-01 8.8494888818062412e-01 9.7376011862054490e-01 1.2410363479391957e+00 1.2604540810482960e+00 1.6998172345465017e+00 1.7260935783940101e+00 1.7619284021050374e+00 1.8253710949924249e+00 1.8994331383822249e+00 2.1868858210207880e+00 2.5299527223857354e+00 2.9877813026022344e+00 3.1249811502110969e+00 3.1891644380139583e+00 3.2804949383455253e+00 3.2904628564586957e+00 3.4371365948763852e+00 3.5077601951323536e+00 3.5697562870657067e+00 3.5997943202057003e+00 3.6362619221313546e+00 3.6870227572287675e+00 3.9239594681596914e+00 3.9460276797462295e+00 4.1576872075675144e+00 4.1640517413974001e+00 4.4333440047456296e+00 4.6494746194225325e+00 4.7623256364664881e+00 5.0045959007369678e+00 5.4886730319967620e+00 5.9727737547176050e+00 6.2826198041845007e+00 6.2900360499916106e+00 6.3851200642383592e+00 6.3900587200859533e+00 6.5556519291461139e+00 6.5918883465912002e+00 6.6592868900687101e+00 6.8085957269624684e+00 7.1135678783311640e+00 7.6305909909586465e+00 1.1915705878438343e+01 ";
  rdft_test(h2o,cc_pVTZ,dftnofit,Etot,Eorb,"Water, PBEPBE/cc-pVTZ no fitting",101,130);

  Etot=-7.6373104131216635e+01;
  Eorb="-1.8739261438776857e+01 -9.1603186237197209e-01 -4.7170881420071054e-01 -3.2520888759001049e-01 -2.4836269417372578e-01 7.6579312386710896e-03 8.0194729434760803e-02 3.3765515273047403e-01 3.7907016814868366e-01 4.6476139458499660e-01 5.4445711009540776e-01 5.9026224707195629e-01 5.9656738414832955e-01 6.4383362376574516e-01 7.4392590690336224e-01 8.8481795863392365e-01 9.7358990616992092e-01 1.2408269503774678e+00 1.2603266134853957e+00 1.6997031190769276e+00 1.7259764000783715e+00 1.7615385245932842e+00 1.8252090584529044e+00 1.8990756276142853e+00 2.1867265602538324e+00 2.5297959530746708e+00 2.9877384881164963e+00 3.1248874741191366e+00 3.1891256411863940e+00 3.2803037255060459e+00 3.2903581461035833e+00 3.4371064320395233e+00 3.5077382970070334e+00 3.5696983368928707e+00 3.5996698911136726e+00 3.6360465563063737e+00 3.6868401653789458e+00 3.9239629919172065e+00 3.9459464906949044e+00 4.1576825914161661e+00 4.1639921885858424e+00 4.4332657478221646e+00 4.6494329060288937e+00 4.7622585152627730e+00 5.0044424268429948e+00 5.4886441055533783e+00 5.9727723223625047e+00 6.2825634654561755e+00 6.2899313617763610e+00 6.3850027373828384e+00 6.3900423211100579e+00 6.5556420187761857e+00 6.5917845379823348e+00 6.6593278813246251e+00 6.8085858043462624e+00 7.1136015570030926e+00 7.6303630674228176e+00 1.1915591504391717e+01 ";
  rdft_test(h2o,cc_pVTZ,dftsph,Etot,Eorb,"Water, PBEPBE/cc-pVTZ",101,130);
  // This should also give the same energies
  rdft_test(h2o,cc_pVTZ,dftdirect,Etot,Eorb,"Water, PBEPBE/cc-pVTZ direct",101,130);  

  Etot=-7.6374677307848572e+01;
  Eorb="-1.8741666893928635e+01 -9.1790290316299794e-01 -4.7348415912148656e-01 -3.2745957242396739e-01 -2.5054880361692167e-01 2.7876125466428600e-03 7.8040086378495147e-02 3.2383112174562440e-01 3.5923673950957680e-01 4.5242306017649342e-01 5.1412624401435403e-01 5.7766754520625785e-01 5.8424025024110982e-01 6.4253359834079071e-01 6.5974120849679252e-01 7.4241304776393824e-01 9.7186888943375160e-01 1.1822037411878827e+00 1.2023200108379799e+00 1.5759088395860315e+00 1.6360767195365280e+00 1.6982101163244232e+00 1.7245074761683261e+00 1.8628528872029586e+00 1.9081245211343385e+00 2.1641861462033747e+00 2.3473067502653637e+00 2.7893216684377085e+00 3.0049300409811486e+00 3.0831639213611264e+00 3.1876646754385667e+00 3.2328104451779951e+00 3.4169088729956929e+00 3.4579477186007868e+00 3.5050274089952436e+00 3.5282602598813710e+00 3.5683135416561673e+00 3.5772243290907815e+00 3.8378984399701843e+00 3.9226495504934311e+00 4.0867147723271540e+00 4.0926848574674706e+00 4.3310798407195437e+00 4.4154577012444935e+00 4.4322762577385326e+00 4.6027416845367952e+00 5.1266039075907219e+00 5.2200769943535770e+00 5.4840374147540247e+00 6.1494454235288183e+00 6.2799558526560997e+00 6.2885259462744170e+00 6.3502454303291183e+00 6.4058759390252176e+00 6.4358349324375261e+00 6.6570016411612745e+00 6.7152835832871993e+00 6.7372127758237728e+00 6.9398690736349691e+00 7.3406543149371739e+00 8.2789554883405287e+00 8.3551813327360556e+00 9.3390509783963864e+00 1.4480073175257948e+01 1.5822735165758681e+01 ";
  rdft_test(h2o,cc_pVTZ,dftcart,Etot,Eorb,"Water, PBEPBE/cc-pVTZ cart",101,130);

  // Polarized calculation
  Etot=-7.4254498189150638e+01;
  Eorba="-1.8999937204698828e+01 -1.3898109104107734e+00 -9.2791175004943149e-01 -7.9396694420745761e-01 -7.9124209134800105e-01 -3.9058307077530835e-01 -3.0971973658294766e-01 -2.3769322868765200e-01 -2.2837725577906587e-01 -1.8976604914004966e-01 -1.8173428526026861e-01 -1.3677441120355516e-01 -1.1615835734760359e-01 -1.1274494168112210e-01 -7.3178873246084117e-02 -6.0205821785316936e-02 8.0048594117280422e-02 1.2462363236717473e-01 1.4125218811166004e-01 2.3519826154414486e-01 3.1226531016274289e-01 4.3589417502079092e-01 4.6932053792521095e-01 4.8387270629621282e-01 6.0282444040866789e-01 6.5272703482871808e-01 7.5339872813442854e-01 8.2819058307128490e-01 1.2806562429486195e+00 1.2870819738380954e+00 1.3734619747487804e+00 1.6344989792444489e+00 1.6570224176101109e+00 1.7786169231741440e+00 1.9516996860636155e+00 2.1553517926113237e+00 2.7141520471629752e+00 2.7390825178414655e+00 2.7602664583868184e+00 3.0712025649843353e+00 3.3624613692245693e+00 ";
  Eorbb="-1.9003786246627563e+01 -1.3627754810535053e+00 -9.1416879967816667e-01 -7.7550148452678669e-01 -7.5169220264231096e-01 -3.8834192924940797e-01 -3.0658922095636099e-01 -2.4081687021052534e-01 -2.2563098819423172e-01 -1.8951449752441113e-01 -1.8250637814583412e-01 -1.3606204225812246e-01 -1.2162875489376578e-01 -1.0832237962222778e-01 -7.8716558557725788e-02 -6.3729306889597395e-02 8.0362072861787995e-02 1.2665186353016747e-01 1.4265820905352949e-01 2.3423353772986649e-01 3.0945625076848604e-01 4.4219936057908410e-01 4.7310844475912933e-01 4.8787371129408635e-01 6.0688997972753600e-01 6.5793617001725069e-01 7.5702819873576110e-01 8.3400606322830473e-01 1.2821582562940059e+00 1.2862414942155411e+00 1.3675183602619430e+00 1.6391014008607729e+00 1.6580216399248486e+00 1.7910908087226460e+00 1.9531581567557128e+00 2.1650334318927964e+00 2.7522816678732065e+00 2.7771381011803653e+00 2.7819625643460171e+00 3.0993842655139465e+00 3.3755560778695015e+00 ";
  udft_test(h2o,aug_cc_pVDZ,dftpol,Etot,Eorba,Eorbb,"Water, B3LYP/aug-cc-pVDZ polarized",402,0);
#endif

  printf("\n");
  Etot=-5.6637319431552505e+03;
  Eorb="-9.4985623404268586e+02 -1.4146635099065509e+02 -1.3119294655365314e+02 -1.3119287270554918e+02 -1.3119259496731067e+02 -2.7676547719760016e+01 -2.3232980821193006e+01 -2.3232722835459704e+01 -2.3231117121037062e+01 -1.6049049314555297e+01 -1.6049045555854313e+01 -1.6047827657607218e+01 -1.6047724026951329e+01 -1.6047713458074220e+01 -1.5604531097539395e+01 -1.5532249495373055e+01 -1.1296661973554899e+01 -1.1249243894519463e+01 -1.1232665103714758e+01 -4.3970789595313322e+00 -2.8992752329452758e+00 -2.8986598464510775e+00 -2.8951186986010131e+00 -1.4177740921159150e+00 -1.2312596774786000e+00 -1.0610694271710206e+00 -8.7645299167431123e-01 -8.5303382987349485e-01 -8.1305176230210652e-01 -7.2468345881954854e-01 -7.1752260836126924e-01 -7.1751287304803246e-01 -7.1453927039149534e-01 -7.1369023672177878e-01 -6.5649508061658501e-01 -6.5484508941626640e-01 -6.4819561332086140e-01 -6.1951446941336008e-01 -5.1149277555563966e-01 -4.5694083001238467e-01 -3.6925756164738466e-01 -1.8059223069416219e-01 6.9314373209596644e-02 7.4011358282542544e-02 1.1409014955567168e-01 1.4993230259730053e-01 1.8266978404389286e-01 1.9355783435850826e-01 2.1197841098423309e-01 2.5237135035424230e-01 2.7656209494975204e-01 2.8532363526352622e-01 3.0336608197387499e-01 3.3343210216710278e-01 3.3688908941518853e-01 3.9652956682692853e-01 4.2174260005154290e-01 5.4893795813976065e-01 5.6113636050323268e-01 6.8232569274366117e-01 8.8548528992044973e-01 9.2615820713284558e-01 9.2670940610743713e-01 9.6328468583868410e-01 9.8346702050740575e-01 9.9887404097696098e-01 1.0364505445880150e+00 1.0834412267579034e+00 1.0936564420587949e+00 1.1989337432362264e+00 1.2617670081468981e+00 1.2818433279124983e+00 1.3193949783977499e+00 1.3895935371875763e+00 1.4308892995405458e+00 1.4702798440537910e+00 1.4945329133369663e+00 1.5683750078677527e+00 1.5822512325196052e+00 1.6271531773836485e+00 1.6323132925501722e+00 1.6700777144806236e+00 1.7294530365211875e+00 1.8374560577529178e+00 1.9460156091857006e+00 1.9779608211022519e+00 2.0568938354808819e+00 2.2440133813923162e+00 2.9829355618984938e+00 3.0788481983297231e+00 5.2757403450806484e+00 2.1121787319148859e+02 ";
  rhf_test(cdcplx,b3_21G,cart,Etot,Eorb,"Cadmium complex, HF/3-21G");
#ifdef DFT_ENABLED
  Etot=-5.6322624844608463e+03;
  Eorb="-9.3378144595172341e+02 -1.3553928740465514e+02 -1.2582849629780617e+02 -1.2582836619778647e+02 -1.2582822508277940e+02 -2.5120977158006514e+01 -2.0991633052709567e+01 -2.0991319916590598e+01 -2.0990351776020322e+01 -1.4372098156759595e+01 -1.4372068304734888e+01 -1.4371540948558561e+01 -1.4371512726880521e+01 -1.4371256954609860e+01 -1.3731023929251609e+01 -1.3661194076559939e+01 -9.6595603325639967e+00 -9.6340953686692874e+00 -9.6176235416225033e+00 -3.4581713466344994e+00 -2.1501943438589439e+00 -2.1494896515936452e+00 -2.1476118344425434e+00 -9.6398136755423258e-01 -8.1336539519425677e-01 -6.8177006941225005e-01 -5.7754815312206154e-01 -5.5625552877310491e-01 -5.2242292245571564e-01 -4.2910268722675160e-01 -4.2031204541362910e-01 -4.0313359671092175e-01 -3.8077962149897887e-01 -3.7170316216677646e-01 -3.5991317419534852e-01 -3.5990451146733926e-01 -3.5922755633909437e-01 -3.5682596871368816e-01 -2.8344405307943138e-01 -2.7579813943527509e-01 -2.3215790562732497e-01 -1.2983062520465774e-01 -5.2112037128524961e-02 -4.5244580418769387e-02 -3.8773804784943078e-02 -2.1821856157288450e-02 -1.1637508132462235e-02 8.2102583489343708e-03 4.2053926159530741e-02 6.8422798901102019e-02 7.9354170874886415e-02 1.0292584994844625e-01 1.0538156559656232e-01 1.3588236282898344e-01 1.4718066875715499e-01 1.7674943514455932e-01 2.0543236025522230e-01 3.1371952198296510e-01 3.2161200559985148e-01 4.1296976135925306e-01 5.9627126069498815e-01 5.9717082695809398e-01 6.2084565035090045e-01 6.5742673373633354e-01 6.7326887949787084e-01 6.8166091809648977e-01 6.9430794610007562e-01 7.8000870388618904e-01 8.0988039388631328e-01 8.7819106672930991e-01 9.0314209455899852e-01 9.4145266103393555e-01 9.7042160414767564e-01 9.9644987914685967e-01 1.0424170832241175e+00 1.1462234461684075e+00 1.1614141421187709e+00 1.2282325543225814e+00 1.2465147768233622e+00 1.2753669445006173e+00 1.2819420841037472e+00 1.3192891094328225e+00 1.3562223101772628e+00 1.4875412032724442e+00 1.6005621697713881e+00 1.6212700646236866e+00 1.7013596111141862e+00 1.8384304889689156e+00 2.5940885444925992e+00 2.6905966655673712e+00 4.7120811446925686e+00 2.0863660132205541e+02 ";
  rdft_test(cdcplx,b3_21G,dftcart,Etot,Eorb,"Cadmium complex, B3LYP/3-21G",402,0);

  printf("\n");
  Etot=-4.6535248966199492e+02;
  Eorb="-1.8624810076215518e+01 -9.8433517530976751e+00 -9.7942670187345495e+00 -9.7910319962954855e+00 -9.7892306339885753e+00 -9.7887576650289834e+00 -9.7886341830595711e+00 -9.7883573989777055e+00 -9.7880306662625536e+00 -9.7878481400851758e+00 -9.7817522881639629e+00 -9.3886446812555302e-01 -7.3850242212696982e-01 -7.2196179653200820e-01 -6.9035059843181745e-01 -6.5775137342852008e-01 -6.1911591627507678e-01 -5.7032580676341837e-01 -5.4075335814440462e-01 -5.2865919595569622e-01 -5.0229382491665497e-01 -4.9617002561161999e-01 -4.7539473746070671e-01 -4.2258762649090548e-01 -4.1882627812923134e-01 -4.0549053221319581e-01 -3.9621694278657849e-01 -3.9093250921703876e-01 -3.7437413818751097e-01 -3.6354066554249798e-01 -3.5939353388554474e-01 -3.3703839639527466e-01 -3.3441701948860564e-01 -3.2588512230598110e-01 -3.1123574849684144e-01 -3.0828079109942441e-01 -3.0175916968973232e-01 -2.8642925748794068e-01 -2.8435723733944235e-01 -2.7837710975462182e-01 -2.7524739486990751e-01 -2.6937034552864114e-01 -2.6335357814562094e-01 -2.5172262883880825e-01 -2.2514284691326650e-01 -2.1437098509764135e-02 -1.3944476961033394e-02 -7.0666549349406669e-03 -6.0950499687605648e-03 -3.3081290917953221e-03 5.5421015038502053e-03 8.6891842922479055e-03 1.8342746166879226e-02 2.3637947626721455e-02 3.0441218098080661e-02 3.1313272925980490e-02 3.7710756565035149e-02 4.0209473879288041e-02 4.5572917509469200e-02 4.8044267606219430e-02 5.1289020914822993e-02 5.5648247771344257e-02 6.3856611650144002e-02 6.8742152503826010e-02 6.9714019272604719e-02 7.7742347802797623e-02 8.2781129133166681e-02 8.5420678654443569e-02 8.7295954834684789e-02 9.2427021841153228e-02 9.5523301035965166e-02 9.8090355676056520e-02 1.0135384079064869e-01 1.0676519775357135e-01 1.0738911556043296e-01 1.1044972760692782e-01 1.1228393699368387e-01 1.1681667354029701e-01 1.1871603548078008e-01 1.2361114816547764e-01 1.2581637418478347e-01 1.2851889170853631e-01 1.3077669652668827e-01 1.3581933138177096e-01 1.3729589628828148e-01 1.3952274392894312e-01 1.4325887792071321e-01 1.4548930345151115e-01 1.4647087928008556e-01 1.5014659962698351e-01 1.5310204792098051e-01 1.5936846562059720e-01 1.6437741980954101e-01 1.6665099435261882e-01 1.6863803348535975e-01 1.7306859996232793e-01 1.7643071722530523e-01 1.8107024416281983e-01 1.8223568790124414e-01 1.8810291929804981e-01 1.8946568536533348e-01 1.9189750078732912e-01 2.0350131012112904e-01 2.0576886252042251e-01 2.1137449948154319e-01 2.1716384337407627e-01 2.2540149326075959e-01 2.3034406647504888e-01 2.3389314985038839e-01 2.4121035971572061e-01 2.4392562863555917e-01 2.5876352316928669e-01 2.6203635923605828e-01 2.6570687429678508e-01 2.6945978729202158e-01 2.7644173111957898e-01 2.7919413665591231e-01 2.9054099085760832e-01 2.9157045594251912e-01 3.0373517300012842e-01 3.1076708016899213e-01 3.1560125480442486e-01 3.3194323064748976e-01 3.3605488479769019e-01 3.3943387988107931e-01 3.4939774013189234e-01 3.5127673535507237e-01 3.5702777876950287e-01 3.6289051615542672e-01 3.6681206692944379e-01 3.7094117775764035e-01 3.9490671836001184e-01 4.0496478174344425e-01 4.1228493229948282e-01 4.2253819974112139e-01 4.2509242445946238e-01 4.2879368645899507e-01 4.3437673761173384e-01 4.4012972183815213e-01 4.4534018765924815e-01 4.5137599215761937e-01 4.6391695482312267e-01 4.6566287588583893e-01 4.7266775398854544e-01 4.7557777882310204e-01 4.8475494305528588e-01 4.8627069230106451e-01 4.9986773023216846e-01 5.0389648948994303e-01 5.0779986508211872e-01 5.1187844190687892e-01 5.1449254079353213e-01 5.2127164646802238e-01 5.2723158796617198e-01 5.3532613067699220e-01 5.5591971247634853e-01 5.6506191141735518e-01 5.7290361485405483e-01 5.9684809110790549e-01 6.1511311891142195e-01 6.2170411086285826e-01 7.3535214448742059e-01 7.5901173945576372e-01 7.8689242032479012e-01 8.2390394472926809e-01 8.6378837813271270e-01 8.8736226277519481e-01 9.0448701102057938e-01 9.4556065116736432e-01 9.5034816004743461e-01 9.6843904820934712e-01 9.7691655546925305e-01 9.8592252583243289e-01 9.9885798364635436e-01 1.0044435404898615e+00 1.0421846464906401e+00 1.0473566208127887e+00 1.0607318554719616e+00 1.0821436457978180e+00 1.0914770791604615e+00 1.1004946091178782e+00 1.1137593513795421e+00 1.1160809083790830e+00 1.1293782856709589e+00 1.1321800068620975e+00 1.1473680154749255e+00 1.1646442457148660e+00 1.1683018976495088e+00 1.1833209724799423e+00 1.1958952739015627e+00 1.2145517152249530e+00 1.2179447023632541e+00 1.2330536401318239e+00 1.2404200272999593e+00 1.2469962026441925e+00 1.2612490184515683e+00 1.2790421048036549e+00 1.2845580413231275e+00 1.3023745956740722e+00 1.3197663960607182e+00 1.3363203964979067e+00 1.3545429382620140e+00 1.3685603229370884e+00 1.3785238303269673e+00 1.3909220031850222e+00 1.4311030914915521e+00 1.4507681030229966e+00 1.5010654349845389e+00 1.5069124511649332e+00 1.5143400852297606e+00 1.5322570988357698e+00 1.5373720654614531e+00 1.5436654090919237e+00 1.5494629181444730e+00 1.5658873072817361e+00 1.5878483325644617e+00 1.6099570322196695e+00 1.6735200803268575e+00 1.6848319740118496e+00 1.7027604526292714e+00 1.7150334600783821e+00 1.7202082549850377e+00 1.7491757806888515e+00 1.7655936383033373e+00 1.8083121395821149e+00 1.8148127977144790e+00 1.8354532203381102e+00 1.8540990108729709e+00 1.8636482289138661e+00 1.8798855488508235e+00 1.8922937415191194e+00 1.9038035231979236e+00 1.9137002863169059e+00 1.9359358960527251e+00 1.9373950932022619e+00 1.9417772437967991e+00 1.9485837458283242e+00 1.9559552823922433e+00 1.9596922088391024e+00 1.9627840197855930e+00 1.9761983252290514e+00 1.9907937372122873e+00 2.0038019346713867e+00 2.0228931708274782e+00 2.0386450531595477e+00 2.0470305791099386e+00 2.0694881119982993e+00 2.0802330772796185e+00 2.0807962864917271e+00 2.0836155217639964e+00 2.0967767545324891e+00 2.1064907088442562e+00 2.1168968898571108e+00 2.1354095886315307e+00 2.1431423577315711e+00 2.1470677794490753e+00 2.1584400034714917e+00 2.1798815510012970e+00 2.1943918940265958e+00 2.2271259372609560e+00 2.2352765202504781e+00 2.2444599612576868e+00 2.2599763895250353e+00 2.2641074948182753e+00 2.2691305597152787e+00 2.3242224285587274e+00 2.3348864645338727e+00 2.3517342663498759e+00 2.3622898797436287e+00 2.4286880971589939e+00 2.4511823740664709e+00 2.4706551196031223e+00 2.4765859992526433e+00 2.4833821227482131e+00 2.4991693259247993e+00 2.5164312444418626e+00 2.5181257645143420e+00 2.5465519012272262e+00 2.5492415836088158e+00 2.5662653290390831e+00 2.5958279234775552e+00 2.6039641967042511e+00 2.6190169705911144e+00 2.6276095022615222e+00 2.6354952788122832e+00 2.6608534424677970e+00 2.6691207945387361e+00 2.6881628565771551e+00 2.6930658796305753e+00 2.6995598638939740e+00 2.7058594583577964e+00 2.7149133553937670e+00 2.7260092429343890e+00 2.7306141038547249e+00 2.7466389745673943e+00 2.7583337775327594e+00 2.8124530652999531e+00 2.9976721370188937e+00 3.0102012995060838e+00 3.0174242178455151e+00 3.0244708171825905e+00 3.0317013061767102e+00 3.0396010457745519e+00 3.0435856836776742e+00 3.0452717715598450e+00 3.0526980813439861e+00 3.0716603471184918e+00 3.0764648634409744e+00 3.1162057883987551e+00 3.1322997110991921e+00 3.1725983486839748e+00 3.1906714610909770e+00 3.2017747533326228e+00 3.2294875145632971e+00 3.2805534158505232e+00 3.2882355854844660e+00 3.3026039430828331e+00 3.3058293548119519e+00 3.3564547148644084e+00 3.8735016528269348e+00 3.9112890669899842e+00 3.9586293762789659e+00 4.0380773479199634e+00 4.0805066976059852e+00 4.0900395758982686e+00 4.1483596182846325e+00 4.1664157406795219e+00 4.2317212011866543e+00 4.3050759392766356e+00 4.3782266322036492e+00 2.6450735535857806e+01 2.6479869454905401e+01 2.6502849690647590e+01 2.6528560021412716e+01 2.6542851641775435e+01 2.6547094781967459e+01 2.6567404665730177e+01 2.6590786896867595e+01 2.6598124303537624e+01 2.6635841297527936e+01 4.3787451812506205e+01 ";
  rdft_test(decanol,DZPd,dftcart,Etot,Eorb,"1-decanol, SVWN/DZP+diffuse",1,7);
#endif

  printf("****** Tests completed in %s *******\n",t.elapsed().c_str());
  
  return 0;
}
