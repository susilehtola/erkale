/*
 *                This source code is part of
 * 
 *                     E  R  K  A  L  E
 *                             -
 *                       HF/DFT from Hel
 *
 * Written by Jussi Lehtola, 2010-2011
 * Copyright (c) 2010-2011, Jussi Lehtola
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

#include "basislibrary.h"
#include "global.h"
#include "mathf.h"
#include "scf.h"
#include "timer.h"
#include "xyzutils.h"

#include <cmath>
#include <cstdio>

/// Relative tolerance in total energy
double tol=5e-7;
/// Absolute tolerance in orbital energies
double otol=1e-5;

/// To compute references instead of running tests
//#define COMPUTE_REFERENCE

double rel_diff(double x, double y) {
  return (x-y)/y;
}

/// Check if \f$ | (x - y)/y | < \tau \f$
bool compare(double x, double y, double tau) {
  // Compute relative difference
  double d=rel_diff(x,y);
  
  if(fabs(d)<tau) {
    //    printf("%e vs %e, difference %e, ok\n",x,y,d);
    return 1;
  } else {
    //    printf("%e vs %e, difference %e, fail\n",x,y,d);
    return 0;
  }
}

bool compare(const arma::vec & x, const arma::vec & y, double tau, size_t & nsucc, size_t & nfail) {
  if(x.n_elem!=y.n_elem)
    throw std::runtime_error("Error - differing amount of computed and reference orbital energies!\n");

  size_t N=min(x.n_elem,y.n_elem);

  nsucc=0;
  nfail=0;

  bool ok=1;
  for(size_t i=0;i<N;i++) {
    double d=x(i)-y(i);

    if(fabs(d)>tau) {
      //      printf("%e vs %e, difference %e, fail\n",x(i),y(i),d);
      ok=0;
      nfail++;
    } else {
      //      printf("%e vs %e, difference %e, ok\n",x(i),y(i),d);
      nsucc++;
    }
  }
 
  return ok;
}

double max_diff(const arma::vec & x, const arma::vec & y) {
  if(x.n_elem!=y.n_elem)
    throw std::runtime_error("Error - differing amount of computed and reference orbital energies!\n");
  
  double m=0;
  for(size_t i=0;i<x.n_elem;i++) {
    double d=fabs(x(i)-y(i));
    if(d>m)
      m=d;
  }

  return m;
}

atom_t convert_to_bohr(const atom_t & in) {
  atom_t ret=in;

  ret.x*=ANGSTROMINBOHR;
  ret.y*=ANGSTROMINBOHR;
  ret.z*=ANGSTROMINBOHR;

  return ret;
}

// Possible statuses
const char * stat[]={"fail","ok"};

void rhf_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorb, const std::string & label) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec E;
  arma::mat C;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.RHF(C,E);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorb=\"");
  for(size_t i=0;i<E.n_elem;i++)
    printf("%.16e ",E(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucc=0, nfail=0;
  compare(E,Eorb,otol,nsucc,nfail); // Compare orbital energies
  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energy is %e.\n",rel_diff(Et,Etot),max_diff(E,Eorb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    fflush(stdout);
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

void uhf_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorba, const arma::vec & Eorbb, const std::string & label) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec Ea, Eb;
  arma::mat Ca, Cb;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.UHF(Ca,Cb,Ea,Eb);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorba=\"");
  for(size_t i=0;i<Ea.n_elem;i++)
    printf("%.16e ",Ea(i));
  printf("\";\n");
  printf("Eorbb=\"");
  for(size_t i=0;i<Eb.n_elem;i++)
    printf("%.16e ",Eb(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucca=0, nfaila=0;
  size_t nsuccb=0, nfailb=0;
  compare(Ea,Eorba,otol,nsucca,nfaila); // Compare orbital energies
  compare(Eb,Eorbb,otol,nsuccb,nfailb); // Compare orbital energies
  size_t nsucc=nsucca+nsuccb;
  size_t nfail=nfaila+nfailb;

  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energies are %e and %e.\n",rel_diff(Et,Etot),max_diff(Ea,Eorba),max_diff(Eb,Eorbb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

void rdft_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorb, const std::string & label, int xfunc, int cfunc) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec E;
  arma::mat C;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.RDFT(C,E,xfunc,cfunc);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorb=\"");
  for(size_t i=0;i<E.n_elem;i++)
    printf("%.16e ",E(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucc=0, nfail=0;
  compare(E,Eorb,otol,nsucc,nfail); // Compare orbital energies
  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energy is %e.\n",rel_diff(Et,Etot),max_diff(E,Eorb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

void udft_test(const std::vector<atom_t> & at, const BasisSetLibrary & baslib, const Settings & set, double Etot, const arma::vec & Eorba, const arma::vec & Eorbb, const std::string & label, int xfunc, int cfunc) {
  Timer t;

  printf("%s, ",label.c_str());
  fflush(stdout);

  arma::vec Ea, Eb;
  arma::mat Ca, Cb;

  BasisSet bas=construct_basis(at,baslib,set);
  SCF solver=SCF(bas,set);
  double Et=solver.UDFT(Ca,Cb,Ea,Eb,xfunc,cfunc);

#ifdef COMPUTE_REFERENCE
  printf("done (%s)\n",t.elapsed().c_str());
  printf("Etot=%.16e;\n",Et);
  printf("Eorba=\"");
  for(size_t i=0;i<Ea.n_elem;i++)
    printf("%.16e ",Ea(i));
  printf("\";\n");
  printf("Eorbb=\"");
  for(size_t i=0;i<Eb.n_elem;i++)
    printf("%.16e ",Eb(i));
  printf("\";\n");
#else
  // Compare results
  bool ok=1;
  size_t nsucca=0, nfaila=0;
  size_t nsuccb=0, nfailb=0;
  compare(Ea,Eorba,otol,nsucca,nfaila); // Compare orbital energies
  compare(Eb,Eorbb,otol,nsuccb,nfailb); // Compare orbital energies
  size_t nsucc=nsucca+nsuccb;
  size_t nfail=nfaila+nfailb;

  ok=compare(Et,Etot,tol); // Compare total energies
  printf("E=%f %s, orbital energies %i ok, %i failed (%s)\n",Etot,stat[ok],(int) nsucc, (int) nfail,t.elapsed().c_str());
  printf("Relative difference of total energy is %e, maximum difference of orbital energies are %e and %e.\n",rel_diff(Et,Etot),max_diff(Ea,Eorba),max_diff(Eb,Eorbb));

  if(!ok) {
    std::ostringstream oss;
    ERROR_INFO();
    oss << "Test " << label << " failed.\n";
    throw std::runtime_error(oss.str());
  }  
#endif
}

/// Run unit tests by comparing calculations to ones that should be OK
int main(void) {
  // Load basis sets

  printf("****** Loading basis sets *******\n");

  BasisSetLibrary b3_21G;
  b3_21G.load_gaussian94("3-21G");

  BasisSetLibrary b6_31Gpp;
  b6_31Gpp.load_gaussian94("6-31G**");

  BasisSetLibrary cc_pVDZ;
  cc_pVDZ.load_gaussian94("cc-pVDZ");

  BasisSetLibrary cc_pVTZ;
  cc_pVTZ.load_gaussian94("cc-pVTZ");

  BasisSetLibrary cc_pVQZ;
  cc_pVQZ.load_gaussian94("cc-pVQZ");

  BasisSetLibrary aug_cc_pVDZ;
  aug_cc_pVDZ.load_gaussian94("aug-cc-pVDZ");

  /*
  BasisSetLibrary cc_pV5Z;
  cc_pV5Z.load_gaussian94("cc-pV5Z");

  BasisSetLibrary cc_pV6Z;
  cc_pV6Z.load_gaussian94("cc-pV6Z");

  BasisSetLibrary aug_cc_pVTZ;
  aug_cc_pVTZ.load_gaussian94("aug-cc-pVTZ");

  BasisSetLibrary aug_cc_pVQZ;
  aug_cc_pVQZ.load_gaussian94("aug-cc-pVQZ");
  */
  
  // Helper structure
  atom_t at;

  // Oxygen atom
  std::vector<atom_t> O;
  at.el="O"; at.x=0.0; at.y=0.0; at.z=0.0; O.push_back(convert_to_bohr(at));

  // Chlorine
  std::vector<atom_t> Cl;
  at.el="Cl"; at.x=0.0; at.y=0.0; at.z=0.0; Cl.push_back(convert_to_bohr(at));

  // Hydrogen molecule
  std::vector<atom_t> H2;
  at.el="H"; at.x=0.0; at.y=0.0; at.z=-0.37; H2.push_back(convert_to_bohr(at));
  at.el="H"; at.x=0.0; at.y=0.0; at.z= 0.37; H2.push_back(convert_to_bohr(at));

  // Water monomer optimized at B3LYP/aug-cc-pVTZ level
  std::vector<atom_t> h2o;
  at.el="O"; at.x= 0.000000; at.y= 0.117030; at.z=0.000000; h2o.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.763404; at.y=-0.468123; at.z=0.000000; h2o.push_back(convert_to_bohr(at));
  at.el="H"; at.x=-0.763404; at.y=-0.468123; at.z=0.000000; h2o.push_back(convert_to_bohr(at));

  // Cadmium complex
  std::vector<atom_t> cdcplx;
  at.el="Cd"; at.x= 0.000000; at.y= 0.000000; at.z= 0.000000; cdcplx.push_back(convert_to_bohr(at));
  at.el="N";  at.x= 0.000000; at.y= 0.000000; at.z=-2.260001; cdcplx.push_back(convert_to_bohr(at));
  at.el="N";  at.x=-0.685444; at.y= 0.000000; at.z=-4.348035; cdcplx.push_back(convert_to_bohr(at));
  at.el="C";  at.x= 0.676053; at.y= 0.000000; at.z=-4.385069; cdcplx.push_back(convert_to_bohr(at));
  at.el="C";  at.x= 1.085240; at.y= 0.000000; at.z=-3.091231; cdcplx.push_back(convert_to_bohr(at));
  at.el="C";  at.x=-1.044752; at.y= 0.000000; at.z=-3.060220; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x= 1.231530; at.y= 0.000000; at.z=-5.300759; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x= 2.088641; at.y= 0.000000; at.z=-2.711077; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x=-2.068750; at.y= 0.000000; at.z=-2.726515; cdcplx.push_back(convert_to_bohr(at));
  at.el="H";  at.x=-1.313170; at.y= 0.000000; at.z=-5.174718; cdcplx.push_back(convert_to_bohr(at));

  // 1-decanol
  std::vector<atom_t> decanol;
  at.el="C"; at.x= 3.951300; at.y= 3.953900; at.z= 3.422300; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 5.374200; at.y= 3.650100; at.z= 2.991900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 5.462800; at.y= 3.376900; at.z= 1.498000; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 3.868100; at.y= 4.261800; at.z= 4.909900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 6.848500; at.y= 2.886000; at.z= 1.103900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 2.476900; at.y= 4.734000; at.z= 5.303900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 7.148200; at.y= 1.524300; at.z= 1.712000; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 2.137100; at.y= 6.069500; at.z= 4.659400; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 8.591100; at.y= 1.087300; at.z= 1.479900; decanol.push_back(convert_to_bohr(at));
  at.el="C"; at.x= 0.698900; at.y= 6.461200; at.z= 4.906200; decanol.push_back(convert_to_bohr(at));
  at.el="O"; at.x= 9.420700; at.y= 1.797400; at.z= 2.371700; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 3.287600; at.y= 3.101000; at.z= 3.176500; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 3.544800; at.y= 4.820400; at.z= 2.851400; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 5.764700; at.y= 2.762000; at.z= 3.541600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.048100; at.y= 4.485600; at.z= 3.267600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 5.215200; at.y= 4.295200; at.z= 0.930600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 4.700900; at.y= 2.627700; at.z= 1.202600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 4.616500; at.y= 5.034600; at.z= 5.179100; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 4.142500; at.y= 3.363300; at.z= 5.496700; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.926800; at.y= 2.833000; at.z= 0.000000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 7.613500; at.y= 3.620500; at.z= 1.424900; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 2.408100; at.y= 4.818800; at.z= 6.406100; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 1.724700; at.y= 3.972500; at.z= 5.015100; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.912400; at.y= 1.558800; at.z= 2.801200; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 6.470000; at.y= 0.761200; at.z= 1.282600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 2.344300; at.y= 6.002200; at.z= 3.566900; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 2.817300; at.y= 6.856200; at.z= 5.040700; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 8.698800; at.y= 0.000000; at.z= 1.663000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 8.897200; at.y= 1.276900; at.z= 0.431600; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.461600; at.y= 7.423200; at.z= 4.435000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.000000; at.y= 5.716800; at.z= 4.502200; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x= 0.486000; at.y= 6.559000; at.z= 5.979000; decanol.push_back(convert_to_bohr(at));
  at.el="H"; at.x=10.311700; at.y= 1.558300; at.z= 2.157100; decanol.push_back(convert_to_bohr(at));

  // Construct settings
  Settings sph;
  sph.set_bool("Verbose",0);

  // No spherical harmonics
  Settings cart=sph;
  cart.set_bool("UseLM",0);

  // Direct calculation
  Settings direct=sph;
  direct.set_bool("Direct",1);

  // Polarized calculation
  Settings pol=sph;
  pol.set_int("Multiplicity",2);
  pol.set_bool("UseADIIS",0);
  //pol.set_bool("UseDIIS",0);
  //  pol.set_bool("UseBroyden",1);

#ifdef DFT_ENABLED
  // DFT tests

  // Settings for DFT
  Settings dftsph=sph; // Normal settings
  dftsph.add_dft_settings();

  Settings dftcart=cart; // Cartesian basis
  dftcart.add_dft_settings();

  Settings dftnofit=dftsph; // No density fitting
  dftnofit.set_bool("DFTFitting",0);

  Settings dftcart_nofit=dftcart;
  dftcart_nofit.set_bool("DFTFitting",0);

  Settings dftdirect=dftsph; // Direct calculation
  dftdirect.set_bool("Direct",1);
  dftdirect.set_bool("DFTDirect",1);

  Settings dftpol=pol; // Polarized calculation
  dftpol.add_dft_settings();

  Settings dftpol_nofit=dftpol; // Polarized calculation, no density fitting
  dftpol_nofit.set_bool("DFTFitting",0);
#endif

  printf("****** Running calculations *******\n");  
  Timer t;

  // Reference total energy
  double Etot;
  // Reference orbital energies
  arma::vec Eorb;
  arma::vec Eorba;
  arma::vec Eorbb;

  // Oxygen, HF, cc-pVDZ
  Etot=-7.4665278726428056e+01;
  Eorb="-2.0699668429305746e+01 -1.2524344055704906e+00 -5.7227047496319350e-01 -5.7227047496318983e-01 9.5299818088128430e-03 1.1361646554023428e+00 1.1361646554023428e+00 1.1867354030039940e+00 1.3655979286585465e+00 2.8659324494165808e+00 2.8750733910794426e+00 2.8750733910794448e+00 2.9026327547131290e+00 2.9026327547131339e+00 ";
  rhf_test(O,cc_pVDZ,sph,Etot,Eorb,"Oxygen, HF/cc-pVDZ");
  
  // Same thing, but in cartesian basis
  Etot=-7.4665341652249595e+01;
  Eorb="-2.0700150573071568e+01 -1.2525283341059998e+00 -5.7239952104172087e-01 -5.7239952104171865e-01 9.4002487921881692e-03 1.1360412695063438e+00 1.1360412695063511e+00 1.1866110121148032e+00 1.2042501265596652e+00 2.8654339936256386e+00 2.8749240213220477e+00 2.8749240213220530e+00 2.9024847901001474e+00 2.9024847901001509e+00 5.4458845250115502e+00 ";
  rhf_test(O,cc_pVDZ,cart,Etot,Eorb,"Oxygen, HF/cc-pVDZ cart");

  // Oxygen, HF, cc-pVTZ
  Etot=-7.4684268595655197e+01;
  Eorb="-2.0701080241863945e+01 -1.2592536718365432e+00 -5.8238193028096241e-01 -5.8237976944939795e-01 -6.0716129946690508e-03 7.4747716854730561e-01 7.4750984841719470e-01 7.8549089599699462e-01 9.1573641975757558e-01 1.6768284861807219e+00 1.6827254426294571e+00 1.6827274046147616e+00 1.7063059550513668e+00 1.7063418698574662e+00 3.9740741994128257e+00 4.0001706032281570e+00 4.0005472213160225e+00 5.4497687068984009e+00 5.4515097606359886e+00 5.4729085084936759e+00 5.4843566232934222e+00 5.4858452885125439e+00 5.5615099921020086e+00 5.5620783634976521e+00 6.5734653124073992e+00 6.5921325403296338e+00 6.5921354155241705e+00 6.6507732252354943e+00 6.6507900055106202e+00 7.5068008274033309e+00 ";
  rhf_test(O,cc_pVTZ,sph,Etot,Eorb,"Oxygen, HF/cc-pVTZ");

  Etot=-7.4684356892528882e+01;
  Eorb="-2.0701536775058809e+01 -1.2595137436165238e+00 -5.8257302456041660e-01 -5.8257302456040994e-01 -7.0450704776825902e-03 5.4358665530308359e-01 7.0312654470985325e-01 7.0312654470987179e-01 7.4062039970009297e-01 1.6753602293710117e+00 1.6825186080030616e+00 1.6825186080030672e+00 1.7061332545246279e+00 1.7061332545246337e+00 2.4722680700878610e+00 3.2663392552319257e+00 3.2743962771753798e+00 3.2743962771756436e+00 5.4346154442115315e+00 5.4470028292994535e+00 5.4470028292994597e+00 5.4840798363016248e+00 5.4840798363016408e+00 5.5459896157797566e+00 5.5459896157797726e+00 6.5734771192420238e+00 6.5918390642532643e+00 6.5918390642532687e+00 6.6504852351698602e+00 6.6504852351698727e+00 6.9515361997236553e+00 7.0434585291730478e+00 7.0434585291737521e+00 1.0235626663273584e+01 1.6315304721718302e+01 ";
  rhf_test(O,cc_pVTZ,cart,Etot,Eorb,"Oxygen, HF/cc-pVTZ cart");

  // Oxygen, HF, cc-pVQZ
  Etot=-7.4689672843416247e+01;
  Eorb="-2.0703820850652416e+01 -1.2613757860610233e+00 -5.8515820401525842e-01 -5.8515626168638679e-01 -1.2773114139443339e-02 5.5661622961439550e-01 5.5663058127836662e-01 5.8788521374436087e-01 5.9191007928788542e-01 1.1933085501962044e+00 1.1986398251507469e+00 1.1986451506247371e+00 1.2201229067780728e+00 1.2201232718269319e+00 2.5890955863581229e+00 2.6097064684889455e+00 2.6102977629201303e+00 3.3389558405156956e+00 3.3417713785367633e+00 3.3458769614753376e+00 3.3704177935649602e+00 3.3709100750466483e+00 3.4202391774223204e+00 3.4204631723940282e+00 3.5414323467402253e+00 4.0175914867490059e+00 4.0312297366452894e+00 4.0312788499335932e+00 4.0787434762931287e+00 4.0787659226596311e+00 9.0267558311359579e+00 9.2013564861642596e+00 9.2041799223646059e+00 9.2333845757742203e+00 9.2345715194220883e+00 9.2746991382936539e+00 9.2778221862902619e+00 9.3070095349844983e+00 9.3371211629771622e+00 1.0169404116113526e+01 1.0238681349281997e+01 1.0239379903715387e+01 1.1336991523005540e+01 1.1341555839089402e+01 1.1366111978452995e+01 1.1379197954245200e+01 1.1383715767166285e+01 1.1478055521749118e+01 1.1479846090152098e+01 1.2352317702769591e+01 1.2377654559953479e+01 1.2377672308733279e+01 1.2455029147334740e+01 1.2455354377885225e+01 4.0522642408279978e+01 ";
  rhf_test(O,cc_pVQZ,sph,Etot,Eorb,"Oxygen, HF/cc-pVQZ");

  Etot=-7.4689715828296229e+01;
  Eorb="-2.0703952880794414e+01 -1.2614956234962647e+00 -5.8522312023719447e-01 -5.8522312023718270e-01 -1.3897555557295202e-02 3.6164281566372314e-01 4.8359788068299114e-01 4.8359788068349535e-01 5.1482865923517329e-01 1.1906629384523224e+00 1.1978440993058239e+00 1.1978440993058435e+00 1.2193416487839022e+00 1.2193416487839137e+00 1.5341864690374116e+00 1.8147913232440758e+00 1.8169278302116920e+00 1.8169278302149063e+00 3.3312137446012406e+00 3.3411101457889334e+00 3.3411101457889525e+00 3.3703143933466282e+00 3.3703143933466584e+00 3.4181364641976621e+00 3.4181364641976772e+00 3.9072895327631274e+00 3.9099510692021449e+00 3.9536552618026781e+00 3.9536552618060137e+00 4.0155445818244342e+00 4.0294090489955527e+00 4.0294090489955785e+00 4.0769950895750586e+00 4.0769950895750791e+00 8.6106719250285515e+00 9.1940185016134421e+00 9.2029174766099349e+00 9.2029174766099686e+00 9.2296300625493544e+00 9.2296300625493721e+00 9.2742052898610456e+00 9.2742052898610652e+00 9.3367360511824504e+00 9.3367360511824860e+00 1.0716113434992034e+01 1.0791985584452901e+01 1.0791985584453323e+01 1.1321009934360756e+01 1.1335435691746344e+01 1.1335435691746392e+01 1.1378849397013628e+01 1.1378849397013676e+01 1.1455413425303213e+01 1.1455413425303238e+01 1.1989400103296067e+01 1.2016038688125050e+01 1.2016038688125763e+01 1.2098734998645313e+01 1.2098734998646725e+01 1.9042245039421747e+01 2.1033406519935131e+01 2.1058049747096206e+01 2.1058049747130351e+01 2.1141460827702613e+01 2.1141460827753402e+01 2.9093638233881713e+01 2.9208807542291503e+01 2.9208807542304289e+01 3.5633212270346213e+01 1.1545321426691261e+02 ";
  rhf_test(O,cc_pVQZ,cart,Etot,Eorb,"Oxygen, HF/cc-pVQZ cart");

  // Chlorine, UHF, cc-pVTZ
  printf("\n");
  Etot=-4.5944650895295348e+02;
  Eorba="-1.0487192732495824e+02 -1.0607731456916534e+01 -8.0945436505354653e+00 -8.0689331675307958e+00 -8.0689331675307781e+00 -1.1333591389956215e+00 -5.7594515800480972e-01 -5.0142033910584072e-01 -5.0142033910583150e-01 5.0038031102824110e-01 5.6758173166975023e-01 6.0901878014412858e-01 6.0901878014416266e-01 1.0467140711056362e+00 1.0627766420431100e+00 1.0627766420431282e+00 1.1177569478757050e+00 1.1177569478757194e+00 ";
  Eorbb="-1.0486051335060348e+02 -1.0596350522410871e+01 -8.0629607486960353e+00 -8.0629607486960229e+00 -8.0461999518581084e+00 -1.0112316861757684e+00 -4.7613922577244949e-01 -4.7613922577244805e-01 -3.7645620135944476e-02 5.2464097650703956e-01 6.1785774580383201e-01 6.1785774580384689e-01 6.6235446209432691e-01 1.1278252059342930e+00 1.1278252059342986e+00 1.1604788425159802e+00 1.1604788425159864e+00 1.1734238950977001e+00 ";
  uhf_test(Cl,b6_31Gpp,pol,Etot,Eorba,Eorbb,"Chlorine, HF/6-31G** polarized");
#ifdef DFT_ENABLED
  // Polarized calculation
  Etot=-4.6013019223191941e+02;
  Eorba="-1.0170623791272868e+02 -9.6270662826494711e+00 -7.4215076416483248e+00 -7.3996667087414103e+00 -7.3996666727794542e+00 -8.8859992510415953e-01 -4.5634331389943239e-01 -4.0418355532833150e-01 -4.0418351168250466e-01 2.5059971789131175e-01 3.1405361695712558e-01 3.4410439171939605e-01 3.4410448009785694e-01 7.4272144749599700e-01 7.5561747993506567e-01 7.5561751983895209e-01 7.9852268986681385e-01 7.9852269056944303e-01 ";
  Eorbb="-1.0170198876430835e+02 -9.6221172071317103e+00 -7.4057928719978250e+00 -7.3958859923334241e+00 -7.3958859823844865e+00 -8.4902814482539635e-01 -3.8947786681371932e-01 -3.8947722187956629e-01 -3.3073282781126112e-01 2.5640444527682960e-01 3.2911710473175754e-01 3.4938941034189586e-01 3.4939124508323255e-01 7.8952672672295898e-01 7.9789820787481780e-01 7.9790126784876736e-01 8.1007372883211459e-01 8.1007392066009898e-01 ";
  udft_test(Cl,b6_31Gpp,dftpol_nofit,Etot,Eorba,Eorbb,"Chlorine, B3LYP/6-31G** polarized",402,0);
#endif

  printf("\n");

  // Hydrogen molecule
  Etot=-1.1287000934442002e+00;
  Eorb="-5.9241098912997037e-01 1.9744005747008161e-01 4.7932104727503055e-01 9.3732369228734513e-01 1.2929037097205383e+00 1.2929037097205385e+00 1.9570226089461711e+00 2.0435200542857599e+00 2.0435200542857648e+00 3.6104742345559311e+00 ";
  rhf_test(H2,cc_pVDZ,sph,Etot,Eorb,"Hydrogen molecule, HF/cc-pVDZ");
#ifdef DFT_ENABLED
  Etot=-1.1603963207432755e+00;
  Eorb="-3.7849076504350060e-01 5.3524954821963011e-02 3.0277496332444026e-01 6.6375297922053600e-01 9.9246470651630048e-01 9.9246470651630514e-01 1.6235395220308566e+00 1.7198888927811349e+00 1.7198888927811393e+00 3.2019339351714096e+00 ";
  rdft_test(H2,cc_pVDZ,dftsph,Etot,Eorb,"Hydrogen molecule, PBEPBE/cc-pVDZ",101,130);
#endif

  printf("\n");

  // Water
  Etot=-7.6056846941492140e+01;
  Eorb="-2.0555336512446136e+01 -1.3429167382449509e+00 -7.0831770497817836e-01 -5.7581634784361757e-01 -5.0395808010501919e-01 1.4187676681805728e-01 2.0351837389142008e-01 5.4325209722579593e-01 5.9743073024741433e-01 6.6902610468331047e-01 7.8618190724898895e-01 8.0264561074431795e-01 8.0477457545814735e-01 8.5895459484528003e-01 9.5696003337862734e-01 1.1369012661203641e+00 1.1927526949086305e+00 1.5238457534432934e+00 1.5568958780903333e+00 2.0323642887776714e+00 2.0594264891496969e+00 2.0653811314862094e+00 2.1684100388512082e+00 2.2356007641932392e+00 2.5930811495622179e+00 2.9554689164925163e+00 3.3611156348999587e+00 3.4906525484143147e+00 3.5741552469566278e+00 3.6466195186854216e+00 3.8098890733441348e+00 3.8721537664289571e+00 3.8807784184569889e+00 3.9569185336285515e+00 3.9987665691432910e+00 4.0736543382360759e+00 4.1801785743668392e+00 4.3092425523822966e+00 4.3760461746849284e+00 4.5715947004936837e+00 4.6348116455461890e+00 4.8596765202504564e+00 5.1402288784775960e+00 5.2874806303149482e+00 5.5463372022724071e+00 6.0424050918362262e+00 6.5330036855353182e+00 6.9016693509017975e+00 6.9365453839677347e+00 6.9802319116329183e+00 7.0182977359694316e+00 7.1338792390135071e+00 7.2154670800292067e+00 7.2255943806766592e+00 7.4235576483656631e+00 7.7211430674544292e+00 8.2697507603910339e+00 1.2755307282278480e+01 ";
  rhf_test(h2o,cc_pVTZ,sph,Etot,Eorb,"Water, HF/cc-pVTZ");
  // Direct calculation
  rhf_test(h2o,cc_pVTZ,direct,Etot,Eorb,"Water, HF/cc-pVTZ direct");

  Etot=-7.6064486129654426e+01;
  Eorb="-2.0560367089109526e+01 -1.3467279568182167e+00 -7.1288511500730278e-01 -5.8000887721643779e-01 -5.0760165036225802e-01 1.1671779483114884e-01 1.7059110123847968e-01 4.4885066011688507e-01 4.6188036064205412e-01 4.9872307651532877e-01 5.8265741487746991e-01 6.0652131922690422e-01 6.1372824489620503e-01 6.5415548062015605e-01 7.1859272733106105e-01 8.5096442812791873e-01 9.1889568173758507e-01 1.1089440946289144e+00 1.1547897315306288e+00 1.3489353402663185e+00 1.4145430573015498e+00 1.4772771446561599e+00 1.4849254787793571e+00 1.5824421691805592e+00 1.6814168730095291e+00 1.9064203205605772e+00 2.0719426282625566e+00 2.1991315378406262e+00 2.2841432952359981e+00 2.3586502540028844e+00 2.4266159668534182e+00 2.4848059337707538e+00 2.5282276224559452e+00 2.5586983013689846e+00 2.5784363635501015e+00 2.6480496032314229e+00 2.6695678001885108e+00 2.8427253086282538e+00 2.8775605689766457e+00 3.0425617277537476e+00 3.1259879424001373e+00 3.2920350641865004e+00 3.3395021114416177e+00 3.4423186460600403e+00 3.6243324529190017e+00 3.7991421477502447e+00 3.9963385439412491e+00 4.1262788555692085e+00 4.1837260583636375e+00 4.2120469565159322e+00 4.4530091223498847e+00 4.4836444639390161e+00 4.6832751515715954e+00 4.7273379538963622e+00 4.7606790946237041e+00 4.9144446771033410e+00 5.3663102729896730e+00 5.4263411150650898e+00 5.9901140304132037e+00 6.0936990062792882e+00 6.2358276597646505e+00 6.3038740260987360e+00 6.6880102703683209e+00 6.7937504089855700e+00 7.0711800468121613e+00 7.2310189186360789e+00 7.2927776929260180e+00 7.3308237076568927e+00 7.3646486749983753e+00 7.5296481586735151e+00 7.6177264372627178e+00 7.7259762385235184e+00 8.0066864804058717e+00 8.0888021479545440e+00 8.1005754437475996e+00 8.1132910683318062e+00 8.1864355198097680e+00 8.2671470042177777e+00 8.3145007738466106e+00 8.3183957276954992e+00 8.4098909990720152e+00 8.5910748696743191e+00 8.9095636024568954e+00 8.9339142525458257e+00 8.9932612618484509e+00 9.1554548063096544e+00 9.2899792393801839e+00 9.3532959309983212e+00 9.9081699788765327e+00 1.0058748516140643e+01 1.0262787785071383e+01 1.0435357070685347e+01 1.0575253929284665e+01 1.0631852878591847e+01 1.0758111734953594e+01 1.1259613028582896e+01 1.1410287470486917e+01 1.1573640505753758e+01 1.1667889983366560e+01 1.1716060748740095e+01 1.1846399334367737e+01 1.2192549636489382e+01 1.2296711077854416e+01 1.2419184466656096e+01 1.2441159733859147e+01 1.2467586333665677e+01 1.3576020916467405e+01 1.3762676881686218e+01 1.4186349626770369e+01 1.4557092137301696e+01 1.4720169030972755e+01 1.4865456867076430e+01 1.6429257202572472e+01 1.6870043606189952e+01 4.4590591574298095e+01 ";
  rhf_test(h2o,cc_pVQZ,sph,Etot,Eorb,"Water, HF/cc-pVQZ");
  // Direct calculation should yield same energies
  rhf_test(h2o,cc_pVQZ,direct,Etot,Eorb,"Water, HF/cc-pVQZ direct");

#ifdef DFT_ENABLED
  Etot=-7.6373040009500698e+01;
  Eorb="-1.8739146525694462e+01 -9.1595065597599112e-01 -4.7162284405342525e-01 -3.2513104405583609e-01 -2.4828714200447385e-01 8.4276128444532167e-03 8.1122977366295326e-02 3.3805164054399350e-01 3.7944648406261333e-01 4.6504842295218191e-01 5.4462136743131884e-01 5.9069528371908131e-01 5.9681283986690015e-01 6.4396655512973966e-01 7.4405281784718147e-01 8.8494888818062412e-01 9.7376011862054490e-01 1.2410363479391957e+00 1.2604540810482960e+00 1.6998172345465017e+00 1.7260935783940101e+00 1.7619284021050374e+00 1.8253710949924249e+00 1.8994331383822249e+00 2.1868858210207880e+00 2.5299527223857354e+00 2.9877813026022344e+00 3.1249811502110969e+00 3.1891644380139583e+00 3.2804949383455253e+00 3.2904628564586957e+00 3.4371365948763852e+00 3.5077601951323536e+00 3.5697562870657067e+00 3.5997943202057003e+00 3.6362619221313546e+00 3.6870227572287675e+00 3.9239594681596914e+00 3.9460276797462295e+00 4.1576872075675144e+00 4.1640517413974001e+00 4.4333440047456296e+00 4.6494746194225325e+00 4.7623256364664881e+00 5.0045959007369678e+00 5.4886730319967620e+00 5.9727737547176050e+00 6.2826198041845007e+00 6.2900360499916106e+00 6.3851200642383592e+00 6.3900587200859533e+00 6.5556519291461139e+00 6.5918883465912002e+00 6.6592868900687101e+00 6.8085957269624684e+00 7.1135678783311640e+00 7.6305909909586465e+00 1.1915705878438343e+01 ";
  rdft_test(h2o,cc_pVTZ,dftnofit,Etot,Eorb,"Water, PBEPBE/cc-pVTZ no fitting",101,130);

  Etot=-7.6373104131216635e+01;
  Eorb="-1.8739261438776857e+01 -9.1603186237197209e-01 -4.7170881420071054e-01 -3.2520888759001049e-01 -2.4836269417372578e-01 7.6579312386710896e-03 8.0194729434760803e-02 3.3765515273047403e-01 3.7907016814868366e-01 4.6476139458499660e-01 5.4445711009540776e-01 5.9026224707195629e-01 5.9656738414832955e-01 6.4383362376574516e-01 7.4392590690336224e-01 8.8481795863392365e-01 9.7358990616992092e-01 1.2408269503774678e+00 1.2603266134853957e+00 1.6997031190769276e+00 1.7259764000783715e+00 1.7615385245932842e+00 1.8252090584529044e+00 1.8990756276142853e+00 2.1867265602538324e+00 2.5297959530746708e+00 2.9877384881164963e+00 3.1248874741191366e+00 3.1891256411863940e+00 3.2803037255060459e+00 3.2903581461035833e+00 3.4371064320395233e+00 3.5077382970070334e+00 3.5696983368928707e+00 3.5996698911136726e+00 3.6360465563063737e+00 3.6868401653789458e+00 3.9239629919172065e+00 3.9459464906949044e+00 4.1576825914161661e+00 4.1639921885858424e+00 4.4332657478221646e+00 4.6494329060288937e+00 4.7622585152627730e+00 5.0044424268429948e+00 5.4886441055533783e+00 5.9727723223625047e+00 6.2825634654561755e+00 6.2899313617763610e+00 6.3850027373828384e+00 6.3900423211100579e+00 6.5556420187761857e+00 6.5917845379823348e+00 6.6593278813246251e+00 6.8085858043462624e+00 7.1136015570030926e+00 7.6303630674228176e+00 1.1915591504391717e+01 ";
  rdft_test(h2o,cc_pVTZ,dftsph,Etot,Eorb,"Water, PBEPBE/cc-pVTZ",101,130);
  // This should also give the same energies
  rdft_test(h2o,cc_pVTZ,dftdirect,Etot,Eorb,"Water, PBEPBE/cc-pVTZ direct",101,130);  

  Etot=-7.6374677307848572e+01;
  Eorb="-1.8741666893928635e+01 -9.1790290316299794e-01 -4.7348415912148656e-01 -3.2745957242396739e-01 -2.5054880361692167e-01 2.7876125466428600e-03 7.8040086378495147e-02 3.2383112174562440e-01 3.5923673950957680e-01 4.5242306017649342e-01 5.1412624401435403e-01 5.7766754520625785e-01 5.8424025024110982e-01 6.4253359834079071e-01 6.5974120849679252e-01 7.4241304776393824e-01 9.7186888943375160e-01 1.1822037411878827e+00 1.2023200108379799e+00 1.5759088395860315e+00 1.6360767195365280e+00 1.6982101163244232e+00 1.7245074761683261e+00 1.8628528872029586e+00 1.9081245211343385e+00 2.1641861462033747e+00 2.3473067502653637e+00 2.7893216684377085e+00 3.0049300409811486e+00 3.0831639213611264e+00 3.1876646754385667e+00 3.2328104451779951e+00 3.4169088729956929e+00 3.4579477186007868e+00 3.5050274089952436e+00 3.5282602598813710e+00 3.5683135416561673e+00 3.5772243290907815e+00 3.8378984399701843e+00 3.9226495504934311e+00 4.0867147723271540e+00 4.0926848574674706e+00 4.3310798407195437e+00 4.4154577012444935e+00 4.4322762577385326e+00 4.6027416845367952e+00 5.1266039075907219e+00 5.2200769943535770e+00 5.4840374147540247e+00 6.1494454235288183e+00 6.2799558526560997e+00 6.2885259462744170e+00 6.3502454303291183e+00 6.4058759390252176e+00 6.4358349324375261e+00 6.6570016411612745e+00 6.7152835832871993e+00 6.7372127758237728e+00 6.9398690736349691e+00 7.3406543149371739e+00 8.2789554883405287e+00 8.3551813327360556e+00 9.3390509783963864e+00 1.4480073175257948e+01 1.5822735165758681e+01 ";
  rdft_test(h2o,cc_pVTZ,dftcart,Etot,Eorb,"Water, PBEPBE/cc-pVTZ cart",101,130);
#endif

  printf("\n");
  Etot=-5.6637319431552505e+03;
  Eorb="-9.4985623404268586e+02 -1.4146635099065509e+02 -1.3119294655365314e+02 -1.3119287270554918e+02 -1.3119259496731067e+02 -2.7676547719760016e+01 -2.3232980821193006e+01 -2.3232722835459704e+01 -2.3231117121037062e+01 -1.6049049314555297e+01 -1.6049045555854313e+01 -1.6047827657607218e+01 -1.6047724026951329e+01 -1.6047713458074220e+01 -1.5604531097539395e+01 -1.5532249495373055e+01 -1.1296661973554899e+01 -1.1249243894519463e+01 -1.1232665103714758e+01 -4.3970789595313322e+00 -2.8992752329452758e+00 -2.8986598464510775e+00 -2.8951186986010131e+00 -1.4177740921159150e+00 -1.2312596774786000e+00 -1.0610694271710206e+00 -8.7645299167431123e-01 -8.5303382987349485e-01 -8.1305176230210652e-01 -7.2468345881954854e-01 -7.1752260836126924e-01 -7.1751287304803246e-01 -7.1453927039149534e-01 -7.1369023672177878e-01 -6.5649508061658501e-01 -6.5484508941626640e-01 -6.4819561332086140e-01 -6.1951446941336008e-01 -5.1149277555563966e-01 -4.5694083001238467e-01 -3.6925756164738466e-01 -1.8059223069416219e-01 6.9314373209596644e-02 7.4011358282542544e-02 1.1409014955567168e-01 1.4993230259730053e-01 1.8266978404389286e-01 1.9355783435850826e-01 2.1197841098423309e-01 2.5237135035424230e-01 2.7656209494975204e-01 2.8532363526352622e-01 3.0336608197387499e-01 3.3343210216710278e-01 3.3688908941518853e-01 3.9652956682692853e-01 4.2174260005154290e-01 5.4893795813976065e-01 5.6113636050323268e-01 6.8232569274366117e-01 8.8548528992044973e-01 9.2615820713284558e-01 9.2670940610743713e-01 9.6328468583868410e-01 9.8346702050740575e-01 9.9887404097696098e-01 1.0364505445880150e+00 1.0834412267579034e+00 1.0936564420587949e+00 1.1989337432362264e+00 1.2617670081468981e+00 1.2818433279124983e+00 1.3193949783977499e+00 1.3895935371875763e+00 1.4308892995405458e+00 1.4702798440537910e+00 1.4945329133369663e+00 1.5683750078677527e+00 1.5822512325196052e+00 1.6271531773836485e+00 1.6323132925501722e+00 1.6700777144806236e+00 1.7294530365211875e+00 1.8374560577529178e+00 1.9460156091857006e+00 1.9779608211022519e+00 2.0568938354808819e+00 2.2440133813923162e+00 2.9829355618984938e+00 3.0788481983297231e+00 5.2757403450806484e+00 2.1121787319148859e+02 ";
  rhf_test(cdcplx,b3_21G,cart,Etot,Eorb,"Cadmium complex, HF/3-21G");
#ifdef DFT_ENABLED
  Etot=-5.6676693040108603e+03;
  Eorb="-9.3989949630778176e+02 -1.3767085566884688e+02 -1.2795628115849183e+02 -1.2795617703963319e+02 -1.2795597246352000e+02 -2.5984513230396214e+01 -2.1817821867970601e+01 -2.1817579989655354e+01 -2.1816497141589171e+01 -1.5092697750902083e+01 -1.5092685475198966e+01 -1.5092039961898440e+01 -1.5091894480684548e+01 -1.5091849706589743e+01 -1.4451997411416432e+01 -1.4376772096005947e+01 -1.0301646276585442e+01 -1.0271591424740798e+01 -1.0254324778764902e+01 -3.7636150617172377e+00 -2.4165974821997147e+00 -2.4159566370884682e+00 -2.4131649118390586e+00 -1.1211327312571835e+00 -9.6404423701139508e-01 -8.2564383267243346e-01 -7.0330635825827925e-01 -6.8267276098553042e-01 -6.4807232964286055e-01 -5.4367335441039655e-01 -5.3720703164774197e-01 -5.2553076265139875e-01 -5.2468512038327231e-01 -5.2442769409731671e-01 -5.1974327080664851e-01 -5.1950507258689371e-01 -5.1476736329037598e-01 -4.9177264493281625e-01 -3.8454257590995111e-01 -3.8028019254661677e-01 -3.2170840064904632e-01 -1.8693874986293676e-01 -5.9081491633729624e-02 -5.6813400535061620e-02 -4.6509529934847721e-02 -4.3796957420248653e-02 -1.6268007325461038e-02 -1.5559973979367083e-02 3.4351142984096354e-02 5.9147172500278691e-02 6.8897615575836665e-02 9.1042104071058630e-02 1.0205943465042704e-01 1.2425801181461607e-01 1.3807721356568889e-01 1.5836554692364041e-01 1.8698799354273754e-01 3.0351791251808796e-01 3.0990400105853372e-01 3.9883575134977378e-01 5.8814212058802184e-01 5.9392870387690622e-01 6.1272091412254936e-01 6.5247360340521232e-01 6.6254328091588011e-01 6.7303431266993496e-01 6.9271694904296122e-01 7.7762481970462394e-01 7.9855435035604128e-01 8.6965866139170633e-01 8.9909697373726871e-01 9.3737136134715116e-01 9.6540094972128099e-01 9.9998288887535947e-01 1.0476134865253344e+00 1.1414373172376100e+00 1.1555321083004597e+00 1.2222114665409436e+00 1.2400112735294540e+00 1.2657747893804325e+00 1.2729558315267571e+00 1.3149191529060500e+00 1.3519184036422316e+00 1.4869465150965002e+00 1.6022996827147442e+00 1.6213851499140763e+00 1.7041812321497030e+00 1.8439074177807522e+00 2.6031529393678201e+00 2.7024442958321480e+00 4.7145830216920839e+00 2.0804442116244408e+02 ";
  rdft_test(cdcplx,b3_21G,dftcart_nofit,Etot,Eorb,"Cadmium complex, B3LYP/3-21G",402,0);

  printf("\n");
  Etot=-4.6528089946384057e+02;
  Eorb="-1.8608226643759977e+01 -9.8275291344471949e+00 -9.7807523140787946e+00 -9.7792811980622432e+00 -9.7772125225545690e+00 -9.7769629367978652e+00 -9.7769233795874868e+00 -9.7765507623474193e+00 -9.7763436222792901e+00 -9.7762886038340504e+00 -9.7710826045783108e+00 -9.2456656713774732e-01 -7.3419347580706418e-01 -7.1720799834033833e-01 -6.8533064320642001e-01 -6.5245697149130888e-01 -6.1386491453244274e-01 -5.6494780778804488e-01 -5.3525853392262090e-01 -5.2415531335202159e-01 -4.9781952977688404e-01 -4.9181086649972722e-01 -4.6438990371154354e-01 -4.1803068040222929e-01 -4.1390053110022190e-01 -3.9808610938646161e-01 -3.9102069917823479e-01 -3.8510351513521984e-01 -3.6927774675990122e-01 -3.5807321173979911e-01 -3.5277100052403915e-01 -3.3178653694733867e-01 -3.2789226927097143e-01 -3.1787563718921880e-01 -3.0655934362987203e-01 -3.0303091742332094e-01 -2.9556386762391385e-01 -2.8073159123669184e-01 -2.7560824506642545e-01 -2.7285598540024891e-01 -2.7082911533389908e-01 -2.6287751004526588e-01 -2.5829494814913806e-01 -2.4679825205011177e-01 -2.0787067178737506e-01 4.6319864371824504e-02 6.0175189186104379e-02 6.4257090524608568e-02 7.0409539066575613e-02 7.9423466470778262e-02 8.5430358499634582e-02 9.2861535215503804e-02 9.7284329887744408e-02 1.0753383319554942e-01 1.2268403006251426e-01 1.2892092722458323e-01 1.3308953332924872e-01 1.3755689124785256e-01 1.4831974901828338e-01 1.5336364577946904e-01 1.5569876713246306e-01 1.5774915913370341e-01 1.6053410393989978e-01 1.6587053772447238e-01 1.7088259317045207e-01 1.8184509511970348e-01 1.8725411657604285e-01 1.9176014254351095e-01 1.9875893729066849e-01 2.0923267700904535e-01 2.1654968937760039e-01 2.2370327816013408e-01 2.3625797263104498e-01 2.4590113778528433e-01 2.5784896589286743e-01 2.6607810294990780e-01 2.7206319761226644e-01 4.4238020019806967e-01 4.4598311374480337e-01 4.5812487216814485e-01 4.7488064534100682e-01 4.8084308889728627e-01 4.8640874965805514e-01 4.9662438413060334e-01 5.0686480315062499e-01 5.1986194437166300e-01 5.2947880219024146e-01 5.3661704094721430e-01 5.5398756730833532e-01 5.6406692005430925e-01 5.9110500548597511e-01 6.1169889568192826e-01 6.2033103550806890e-01 6.2376847725362128e-01 6.2958110340669027e-01 6.3311414052368054e-01 6.4902360423934258e-01 6.6714615691025636e-01 6.9258814025523430e-01 7.0333543127099174e-01 7.1431565432583255e-01 7.3245061913720233e-01 7.4089003771425010e-01 7.6308185420007557e-01 7.6829467168750176e-01 7.7823567441487362e-01 7.8809688552941215e-01 7.9342459924890796e-01 7.9918012966765983e-01 8.1338691987337219e-01 8.2462565794905551e-01 8.3457405026222398e-01 8.4724311892777204e-01 8.5473721300285477e-01 8.5606060768929637e-01 8.6064704874546061e-01 8.6639888168536705e-01 8.7504849220357672e-01 8.8079944209504935e-01 8.8623694100226724e-01 8.9504621928117578e-01 9.0336692522643991e-01 9.1258804692615891e-01 9.2301034467121579e-01 9.3255710772285716e-01 9.3949621305733821e-01 9.5856794432495707e-01 9.8301303566769416e-01 9.8914255426037256e-01 9.9967291501524014e-01 1.0354431774899129e+00 1.0666143418356051e+00 1.1152804453410807e+00 1.1649152379668699e+00 1.1820735768406014e+00 1.2297385620421801e+00 1.2501635996879330e+00 1.2846142336267810e+00 1.2902076685538417e+00 1.3353974231079342e+00 1.3524807486310617e+00 1.3872514229577839e+00 1.4210875768246429e+00 1.4243830971610334e+00 1.4702089411320491e+00 1.5038452712722286e+00 1.5175991927412744e+00 1.5361135689411523e+00 1.5587429234584234e+00 1.5730124284090681e+00 1.5897640195473792e+00 1.6034391491184878e+00 1.6214747404007670e+00 1.6429404184216443e+00 1.6476291381243893e+00 1.6567036993661597e+00 1.6699300705744244e+00 1.6887351517482685e+00 1.7262126061028504e+00 1.7419490228980248e+00 1.7489080917842701e+00 1.7947502453569648e+00 1.7978696000688712e+00 1.8146460727793172e+00 1.8166557558060770e+00 1.8388463677667668e+00 1.8551661618682660e+00 1.8665373701106844e+00 1.8807584007990434e+00 1.8865525900773601e+00 1.9091939330622536e+00 1.9248539029935681e+00 1.9454935327292000e+00 1.9547634415052433e+00 1.9699672810070470e+00 1.9895092575306257e+00 1.9929180699915647e+00 1.9965557426302998e+00 2.0210821664877878e+00 2.0345221167344407e+00 2.0423612062151020e+00 2.0463423068851738e+00 2.0627837886960760e+00 2.0687481866355655e+00 2.0803800794422185e+00 2.0945812530124197e+00 2.1163864918450646e+00 2.1305583604709883e+00 2.1655840918029758e+00 2.1727795093605811e+00 2.1851028823198737e+00 2.1905608895745150e+00 2.1993144537275215e+00 2.2169191044918950e+00 2.2292761092803999e+00 2.2371677734593036e+00 2.2704934009940527e+00 2.2783409508153789e+00 2.2862312312881552e+00 2.3139757103964809e+00 2.3286428526480414e+00 2.3341166529231661e+00 2.3450231778060995e+00 2.3667821585498978e+00 2.4010229369460099e+00 2.4057762764289330e+00 2.4250075941651028e+00 2.4401274513020486e+00 2.4503416259668502e+00 2.4809416593552758e+00 2.5110237209544723e+00 2.5315002909861373e+00 2.5493827997229546e+00 2.5562126913339562e+00 2.5856343397989803e+00 2.5997613635910319e+00 2.6077809556802491e+00 2.6273577856841284e+00 2.6483993069189466e+00 2.6537947624924372e+00 2.6616514341676458e+00 2.6785682816694583e+00 2.6908741632889313e+00 2.7099348307095883e+00 2.7134519032501658e+00 2.7255445702870880e+00 2.7295233088957884e+00 2.7467581407988133e+00 2.7669552875335475e+00 2.7930526387322652e+00 2.8005130534800724e+00 2.8029842696882810e+00 2.8140503739601286e+00 2.8196798888573289e+00 2.8262070429786137e+00 2.8300646035856754e+00 2.8331861969727989e+00 2.8383796566866448e+00 2.8599900679695365e+00 2.8783017453601372e+00 2.8905131727492264e+00 2.9241478110965757e+00 3.1047972335080409e+00 3.1399854666271509e+00 3.1646441926779048e+00 3.1858220406376367e+00 3.1993519894569862e+00 3.2088034473739429e+00 3.2128068765405460e+00 3.2312311357089603e+00 3.2461630416326561e+00 3.2636756602097909e+00 3.2829565135400425e+00 3.3039393460909654e+00 3.3283348328602540e+00 3.3710420252307296e+00 3.4005449175784501e+00 3.4077405263287401e+00 3.4093696153648616e+00 3.4420796087415670e+00 3.4821417759599389e+00 3.4916914881953911e+00 3.5012354785832276e+00 3.5025855069698104e+00 3.8378882922013928e+00 4.1747480989932964e+00 4.2315447669141388e+00 4.2937151307715720e+00 4.3914039494269028e+00 4.4421394886643180e+00 4.4668368169589217e+00 4.5182158693190049e+00 4.5844247178698128e+00 4.6457246714686136e+00 4.7241115884266929e+00 ";
  rdft_test(decanol,b6_31Gpp,dftcart,Etot,Eorb,"1-decanol, SVWN/6-31G**",1,7);
#endif

  printf("****** Tests completed in %s *******\n",t.elapsed().c_str());
  
  return 0;
}
