/*
 *                This source code is part of
 *
 *                     E  R  K  A  L  E
 *                             -
 *                       DFT from Hel
 *
 * Written by Susi Lehtola, 2010-2013
 * Copyright (c) 2010-2013, Susi Lehtola
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

#include "global.h"

/* Restricted case */
#if defined(RESTRICTED) && defined(DFT)
void SCF::Fock_RDFT(rscf_t & sol, const std::vector<double> & occs, const dft_t dft, DFTGrid & grid, DFTGrid & nlgrid) const

#elif defined(RESTRICTED) && defined(HF)
void SCF::Fock_RHF(rscf_t & sol, const std::vector<double> & occs) const

#elif defined(UNRESTRICTED) && defined(DFT)
void SCF::Fock_UDFT(uscf_t & sol, const std::vector<double> & occa, const std::vector<double> & occb, const dft_t dft, DFTGrid & grid, DFTGrid & nlgrid) const

#elif defined(UNRESTRICTED) && defined(HF)
void SCF::Fock_UHF(uscf_t & sol, const std::vector<double> & occa, const std::vector<double> & occb) const

#elif defined(UNRESTRICTED) && defined(_ROHF)
void SCF::Fock_ROHF(uscf_t & sol, const std::vector<double> & occa, const std::vector<double> & occb) const

#elif defined(DFT) && defined(FULLHOLE)
void XRSSCF::Fock_full_hole(uscf_t & sol, dft_t dft, const std::vector<double> & occa, const std::vector<double> & occb, DFTGrid & grid, DFTGrid & nlgrid) const

#elif defined(DFT) && defined(HALFHOLE)
void XRSSCF::Fock_half_hole(uscf_t & sol, dft_t dft, const std::vector<double> & occa, const std::vector<double> & occb, DFTGrid & grid, DFTGrid & nlgrid) const
#endif
{
  Timer t;

  // Consistency check
  MAT_SIZE_CHECK(sol.P,Nbf,Nbf);
#ifndef RESTRICTED
  MAT_SIZE_CHECK(sol.Pa,Nbf,Nbf);
  MAT_SIZE_CHECK(sol.Pb,Nbf,Nbf);
#endif

  // Coulomb and exchange matrices
  sol.J.zeros(Nbf,Nbf);
#ifdef RESTRICTED
  sol.K.zeros(Nbf,Nbf);
#else
  sol.Ka.zeros(Nbf,Nbf);
  sol.Kb.zeros(Nbf,Nbf);
#endif

#if defined(DFT) && defined(RESTRICTED)
  // Exchange-correlation functional
  sol.XC.zeros(Nbf,Nbf);
#endif
#if defined(DFT) && !defined(RESTRICTED)
  // Exchange-correlation functional
  sol.XCa.zeros(Nbf,Nbf);
  sol.XCb.zeros(Nbf,Nbf);
#endif

#ifdef DFT
  // Range separation constants
  double omega, kfull, kshort;
  range_separation(dft.x_func,omega,kfull,kshort);
#endif

  // Range-separated exchange matrices
#ifdef RESTRICTED
  arma::mat Kfull, Kfull_im, Kshort, Kshort_im;
  Kfull.zeros(Nbf,Nbf);
  Kfull_im.zeros(Nbf,Nbf);
  Kshort.zeros(Nbf,Nbf);
  Kshort_im.zeros(Nbf,Nbf);
#else
  arma::mat Kafull, Kafull_im, Kbfull, Kbfull_im, Kashort, Kashort_im, Kbshort, Kbshort_im;
  Kafull.zeros(Nbf,Nbf);
  Kafull_im.zeros(Nbf,Nbf);
  Kbfull.zeros(Nbf,Nbf);
  Kbfull_im.zeros(Nbf,Nbf);
  Kashort.zeros(Nbf,Nbf);
  Kashort_im.zeros(Nbf,Nbf);
  Kbshort.zeros(Nbf,Nbf);
  Kbshort_im.zeros(Nbf,Nbf);
#endif

  // Initialize energy
  memset(&sol.en, 0, sizeof(energy_t));
  
  // Form Coulomb and exchange matrices
  if(densityfit) {

#ifdef DFT
    if(omega!=0.0)
      throw std::runtime_error("Density fitting not implemented for range separated functionals.\n");
#endif

    if(verbose) {
      printf("Forming density fitted Coulomb matrix ... ");
      fflush(stdout);
      t.set();
    }
    sol.J=dfit.calcJ(sol.P);

    if(verbose) {
      printf("done (%s)\n",t.elapsed().c_str());
      fflush(stdout);
    }

#ifdef DFT
    if(kfull!=0.0) {
#endif
      if(verbose) {
	printf("Forming density fitted exchange matrix ... ");
	fflush(stdout);
	t.set();
      }

#ifdef RESTRICTED
      if(sol.P_im.n_rows == sol.P.n_rows && sol.P_im.n_cols == sol.P.n_cols) {
	// Complex exchange matrix is
	arma::cx_mat cK(dfit.calcK(sol.cC,occs,fitmem));
	Kfull=arma::real(cK);
	Kfull_im=arma::imag(cK);
      } else
	Kfull=dfit.calcK(sol.C,occs,fitmem);
#else
      if(sol.Pa_im.n_rows == sol.Pa.n_rows && sol.Pa_im.n_cols == sol.Pa.n_cols) {
	// Complex exchange matrix is
	arma::cx_mat cKa(dfit.calcK(sol.cCa,occa,fitmem));
	Kafull=arma::real(cKa);
	Kafull_im=arma::imag(cKa);
      } else
	Kafull=dfit.calcK(sol.Ca,occa,fitmem);

      if(sol.Pb_im.n_rows == sol.Pb.n_rows && sol.Pb_im.n_cols == sol.Pb.n_cols) {
	// Complex exchange matrix is
	arma::cx_mat cKb(dfit.calcK(sol.cCb,occb,fitmem));
	Kbfull=arma::real(cKb);
	Kbfull_im=arma::imag(cKb);
      } else
	Kbfull=dfit.calcK(sol.Cb,occb,fitmem);
#endif

      if(verbose) {
	printf("done (%s)\n",t.elapsed().c_str());
	fflush(stdout);
      }

#ifdef DFT
    }
#endif

  } else { // No density fitting

    if(cholesky) {
      if(verbose) {
	printf("Forming Cholesky Coulomb matrix ... ");
	fflush(stdout);
	t.set();
      }

      sol.J=chol.calcJ(sol.P);

      if(verbose) {
	printf("done (%s)\n",t.elapsed().c_str());
	fflush(stdout);
      }

#ifdef DFT
      if(kfull!=0.0) {
#endif
	
	if(verbose) {
	  printf("Forming Cholesky exchange matrix ... ");
	  fflush(stdout);
	  t.set();
	}

#ifdef RESTRICTED
	if(sol.P_im.n_rows == sol.P.n_rows && sol.P_im.n_cols == sol.P.n_cols) {
	  arma::cx_mat cK(chol.calcK(sol.cC,occs));
	  Kfull=arma::real(cK);
	  Kfull_im=arma::imag(cK);
	} else
	  Kfull=chol.calcK(sol.C,occs);
#else
	if(sol.Pa_im.n_rows == sol.Pa.n_rows && sol.Pa_im.n_cols == sol.Pa.n_cols) {
	  arma::cx_mat cKa(chol.calcK(sol.cCa,occa));
	  Kafull=arma::real(cKa);
	  Kafull_im=arma::imag(cKa);
	} else
	  Kafull=chol.calcK(sol.Ca,occa);

	if(sol.Pb_im.n_rows == sol.Pb.n_rows && sol.Pb_im.n_cols == sol.Pb.n_cols) {
	  arma::cx_mat cKb(chol.calcK(sol.cCb,occb));
	  Kbfull=arma::real(cKb);
	  Kbfull_im=arma::imag(cKb);
	} else
	  Kbfull=chol.calcK(sol.Cb,occb);
#endif

	if(verbose) {
	  printf("done (%s)\n",t.elapsed().c_str());
	  fflush(stdout);
	}
#ifdef DFT
      }
#endif

#ifdef DFT
      if(kshort!=0.0) {

	if(verbose) {
	  printf("Forming short-range Cholesky exchange matrix ... ");
	  fflush(stdout);
	  t.set();
	}

#ifdef RESTRICTED
	if(sol.P_im.n_rows == sol.P.n_rows && sol.P_im.n_cols == sol.P.n_cols) {
	  arma::cx_mat cK(chol_rs.calcK(sol.cC,occs));
	  Kshort=arma::real(cK);
	  Kshort_im=arma::imag(cK);
	} else
	  Kshort=chol_rs.calcK(sol.C,occs);
#else
	if(sol.Pa_im.n_rows == sol.Pa.n_rows && sol.Pa_im.n_cols == sol.Pa.n_cols) {
	  arma::cx_mat cKa(chol_rs.calcK(sol.cCa,occa));
	  Kashort=arma::real(cKa);
	  Kashort_im=arma::imag(cKa);
	} else
	  Kashort=chol_rs.calcK(sol.Ca,occa);

	if(sol.Pb_im.n_rows == sol.Pb.n_rows && sol.Pb_im.n_cols == sol.Pb.n_cols) {
	  arma::cx_mat cKb(chol_rs.calcK(sol.cCb,occb));
	  Kbshort=arma::real(cKb);
	  Kbshort_im=arma::imag(cKb);
	} else
	  Kbshort=chol_rs.calcK(sol.Cb,occb);
#endif

	if(verbose) {
	  printf("done (%s)\n",t.elapsed().c_str());
	  fflush(stdout);
	}
      }
#endif
      
    } else {
      if(direct) {
#ifdef RESTRICTED
	
#ifdef DFT
	if(kfull!=0.0) {
#endif
	  if(verbose) {
	    printf("Computing HF Coulomb and exchange matrices.\nScreening integrals with tolerance %.3e ... ",intthr);
	    fflush(stdout);
	    t.set();
	  }

	  if(sol.P_im.n_rows == sol.P.n_rows && sol.P_im.n_cols == sol.P.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cP(sol.P*COMPLEX1 + sol.P_im*COMPLEXI);
	    arma::cx_mat cK;

	    if(!decfock) {
	      scr.calcJK(cP,sol.J,cK,intthr);
	    } else {
	      // Helper matrices
	      arma::cx_mat Phlp=decconv*cP*arma::trans(decconv);
	      // Calculate
	      scr.calcJK(Phlp,sol.J,cK,intthr);
	      // Convert back to contracted basis
	      sol.J=arma::trans(decconv)*sol.J*decconv;
	      cK=arma::trans(decconv)*cK*decconv;
	    }

	    Kfull=arma::real(cK);
	    Kfull_im=arma::imag(cK);
	  } else {
	    if(!decfock) {
	      scr.calcJK(sol.P,sol.J,Kfull,intthr);
	    } else {
	      // Helper matrices
	      arma::mat Phlp=decconv*sol.P*arma::trans(decconv);
	      // Calculate
	      scr.calcJK(Phlp,sol.J,Kfull,intthr);
	      // Convert back to contracted basis
	      sol.J=arma::trans(decconv)*sol.J*decconv;
	      Kfull=arma::trans(decconv)*Kfull*decconv;
	    }
	  }

	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }

#ifdef DFT
	} else {

	  if(verbose) {
	    printf("Computing HF Coulomb matrix.\nScreening integrals with tolerance %.3e ... ",intthr);
	    fflush(stdout);
	    t.set();
	  }

	  if(!decfock)
	    sol.J=scr.calcJ(sol.P,intthr);
	  else {
	    arma::mat Phlp=decconv*sol.P*arma::trans(decconv);
	    arma::mat Jhlp=scr.calcJ(Phlp,intthr);
	    sol.J=arma::trans(decconv)*Jhlp*decconv;
	  }

	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }

	}

	if(kshort!=0.0) {
	  if(verbose) {
	    printf("Computing screened exchange matrix.\nScreening integrals with tolerance %.3e ... ",intthr);
	    fflush(stdout);
	    t.set();
	  }

	  if(sol.P_im.n_rows == sol.P.n_rows && sol.P_im.n_cols == sol.P.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cP(sol.P*COMPLEX1 + sol.P_im*COMPLEXI);
	    arma::cx_mat cK;

	    if(!decfock) {
	      cK=scr_rs.calcK(cP,intthr);
	    } else {
	      // Helper matrices
	      arma::cx_mat Phlp=decconv*cP*arma::trans(decconv);
	      // Calculate
	      cK=scr_rs.calcK(Phlp,intthr);
	      // Convert back to contracted basis
	      cK=arma::trans(decconv)*cK*decconv;
	    }

	    Kshort=arma::real(cK);
	    Kshort_im=arma::imag(cK);

	  } else {
	    if(!decfock) {
	      Kshort=scr_rs.calcK(sol.P,intthr);
	    } else {
	      // Helper matrices
	      arma::mat Phlp=decconv*sol.P*arma::trans(decconv);
	      // Calculate
	      Kshort=scr_rs.calcK(Phlp,intthr);
	      // Convert back to contracted basis
	      Kshort=arma::trans(decconv)*Kshort*decconv;
	    }
	  }

	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }
	}
#endif


#else
	// Unrestricted case
#ifdef DFT
	if(kfull!=0.0) {
#endif
	  if(verbose) {
	    printf("Computing HF Coulomb and exchange matrices.\nScreening integrals with tolerance %.3e ... ",intthr);
	    fflush(stdout);
	    t.set();
	  }

	  if(sol.Pa_im.n_rows == sol.Pa.n_rows && sol.Pa_im.n_cols == sol.Pa.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cPa(sol.Pa*COMPLEX1 + sol.Pa_im*COMPLEXI);
	    arma::cx_mat cPb(sol.Pb*COMPLEX1 + sol.Pb_im*COMPLEXI);
	    arma::cx_mat cKa, cKb;

	    if(!decfock) {
	      scr.calcJK(cPa,cPb,sol.J,cKa,cKb,intthr);
	    } else {
	      // Helper matrices
	      arma::cx_mat Pahlp=decconv*cPa*arma::trans(decconv);
	      arma::cx_mat Pbhlp=decconv*cPb*arma::trans(decconv);
	      // Calculate
	      scr.calcJK(Pahlp,Pbhlp,sol.J,cKa,cKb,intthr);
	      // Convert back to contracted basis
	      sol.J=arma::trans(decconv)*sol.J*decconv;
	      cKa=arma::trans(decconv)*cKa*decconv;
	      cKb=arma::trans(decconv)*cKb*decconv;
	    }

	    Kafull=arma::real(cKa);
	    Kafull_im=arma::imag(cKa);
	    Kbfull=arma::real(cKb);
	    Kbfull_im=arma::imag(cKb);

	  } else {
	    if(!decfock) {
	      scr.calcJK(sol.Pa,sol.Pb,sol.J,Kafull,Kbfull,intthr);
	    } else {
	      // Helper matrices
	      arma::mat Pahlp=decconv*sol.Pa*arma::trans(decconv);
	      arma::mat Pbhlp=decconv*sol.Pb*arma::trans(decconv);
	      // Calculate
	      scr.calcJK(Pahlp,Pbhlp,sol.J,Kafull,Kbfull,intthr);
	      // Convert back to contracted basis
	      sol.J=arma::trans(decconv)*sol.J*decconv;
	      Kafull=arma::trans(decconv)*Kafull*decconv;
	      Kbfull=arma::trans(decconv)*Kbfull*decconv;
	    }
	  }

	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }


#ifdef DFT
	} else {

	  if(verbose) {
	    printf("Computing HF Coulomb matrix.\nScreening integrals with tolerance %.3e ... ",intthr);
	    fflush(stdout);
	    t.set();
	  }

	  if(!decfock)
	    sol.J=scr.calcJ(sol.P,intthr);
	  else {
	    arma::mat Phlp=decconv*sol.P*arma::trans(decconv);
	    arma::mat Jhlp=scr.calcJ(Phlp,intthr);
	    sol.J=arma::trans(decconv)*Jhlp*decconv;
	  }

	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }

	}


	if(kshort!=0.0) {
	  if(verbose) {
	    printf("Computing screened exchange matrix.\nScreening integrals with tolerance %.3e ... ",intthr);
	    fflush(stdout);
	    t.set();
	  }

	  if(sol.Pa_im.n_rows == sol.Pa.n_rows && sol.Pa_im.n_cols == sol.Pa.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cPa(sol.Pa*COMPLEX1 + sol.Pa_im*COMPLEXI);
	    arma::cx_mat cPb(sol.Pb*COMPLEX1 + sol.Pb_im*COMPLEXI);
	    arma::cx_mat cKa, cKb;

	    if(!decfock) {
	      scr_rs.calcK(cPa,cPb,cKa,cKb,intthr);
	    } else {
	      // Helper matrices
	      arma::cx_mat Pahlp=decconv*cPa*arma::trans(decconv);
	      arma::cx_mat Pbhlp=decconv*cPb*arma::trans(decconv);
	      // Calculate
	      scr_rs.calcK(Pahlp,Pbhlp,cKa,cKb,intthr);
	      // Convert back to contracted basis
	      cKa=arma::trans(decconv)*cKa*decconv;
	      cKb=arma::trans(decconv)*cKb*decconv;
	    }

	    Kashort=arma::real(cKa);
	    Kashort_im=arma::imag(cKa);
	    Kbshort=arma::real(cKb);
	    Kbshort_im=arma::imag(cKb);

	  } else {
	    if(!decfock) {
	      scr_rs.calcK(sol.Pa,sol.Pb,Kashort,Kbshort,intthr);
	    } else {
	      // Helper matrices
	      arma::mat Pahlp=decconv*sol.Pa*arma::trans(decconv);
	      arma::mat Pbhlp=decconv*sol.Pb*arma::trans(decconv);
	      // Calculate
	      scr_rs.calcK(Pahlp,Pbhlp,Kashort,Kbshort,intthr);
	      // Convert back to contracted basis
	      Kashort=arma::trans(decconv)*Kashort*decconv;
	      Kbshort=arma::trans(decconv)*Kbshort*decconv;
	    }
	  }

	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }
	}
#endif

#endif
      } else {

	// Conventional mode - use tabled integrals

	if(verbose) {
	  printf("Forming HF Coulomb matrix ... ");
	  fflush(stdout);
	  t.set();
	}

	sol.J=tab.calcJ(sol.P);

	if(verbose) {
	  printf("done (%s)\n",t.elapsed().c_str());
	  fflush(stdout);
	}

#ifdef DFT
	if(kfull!=0.0) {
#endif

	  if(verbose) {
	    printf("Forming HF exchange matrix ... ");
	    fflush(stdout);
	    t.set();
	  }

#ifdef RESTRICTED
	  if(sol.P_im.n_rows == sol.P.n_rows && sol.P_im.n_cols == sol.P.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cP(sol.P*COMPLEX1 + sol.P_im*COMPLEXI);
	    arma::cx_mat cK(tab.calcK(cP));
	    Kfull=arma::real(cK);
	    Kfull_im=arma::imag(cK);
	  } else
	    Kfull=tab.calcK(sol.P);
#else
	  if(sol.Pa_im.n_rows == sol.Pa.n_rows && sol.Pa_im.n_cols == sol.Pa.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cPa(sol.Pa*COMPLEX1 + sol.Pa_im*COMPLEXI);
	    arma::cx_mat cKa(tab.calcK(cPa));
	    Kafull=arma::real(cKa);
	    Kafull_im=arma::imag(cKa);
	  } else
	    Kafull=tab.calcK(sol.Pa);

	  if(sol.Pb_im.n_rows == sol.Pb.n_rows && sol.Pb_im.n_cols == sol.Pb.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cPb(sol.Pb*COMPLEX1 + sol.Pb_im*COMPLEXI);
	    arma::cx_mat cKb(tab.calcK(cPb));
	    Kbfull=arma::real(cKb);
	    Kbfull_im=arma::imag(cKb);
	  } else
	    Kbfull=tab.calcK(sol.Pb);
#endif

	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }
#ifdef DFT
	}
#endif

#ifdef DFT
	if(kshort!=0.0) {

	  if(verbose) {
	    printf("Forming short-range HF exchange matrix ... ");
	    fflush(stdout);
	    t.set();
	  }

#ifdef RESTRICTED
	  if(sol.P_im.n_rows == sol.P.n_rows && sol.P_im.n_cols == sol.P.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cP(sol.P*COMPLEX1 + sol.P_im*COMPLEXI);
	    arma::cx_mat cK(tab_rs.calcK(cP));
	    Kshort=arma::real(cK);
	    Kshort_im=arma::imag(cK);
	  } else
	    Kshort=tab_rs.calcK(sol.P);
#else
	  if(sol.Pa_im.n_rows == sol.Pa.n_rows && sol.Pa_im.n_cols == sol.Pa.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cPa(sol.Pa*COMPLEX1 + sol.Pa_im*COMPLEXI);
	    arma::cx_mat cKa(tab_rs.calcK(cPa));
	    Kashort=arma::real(cKa);
	    Kashort_im=arma::imag(cKa);
	  } else
	    Kashort=tab_rs.calcK(sol.Pa);

	  if(sol.Pb_im.n_rows == sol.Pb.n_rows && sol.Pb_im.n_cols == sol.Pb.n_cols) {
	    // Complex density matrix is
	    arma::cx_mat cPb(sol.Pb*COMPLEX1 + sol.Pb_im*COMPLEXI);
	    arma::cx_mat cKb(tab_rs.calcK(cPb));
	    Kbshort=arma::real(cKb);
	    Kbshort_im=arma::imag(cKb);
	  } else
	    Kbshort=tab_rs.calcK(sol.Pb);
#endif
	  if(verbose) {
	    printf("done (%s)\n",t.elapsed().c_str());
	    fflush(stdout);
	  }
	}
#endif
      }
    }
  }


#ifdef DFT
  // Combine short and long range exchanges
#ifdef RESTRICTED
  sol.K=kfull*Kfull + kshort*Kshort;
  if(sol.P.n_rows == sol.P_im.n_rows && sol.P.n_cols == sol.P_im.n_cols)
    sol.K_im=kfull*Kfull_im + kshort*Kshort_im;
  else
    sol.K_im.clear();
#else
  sol.Ka=kfull*Kafull + kshort*Kashort;
  if(sol.Pa.n_rows == sol.Pa_im.n_rows && sol.Pa.n_cols == sol.Pa_im.n_cols)
    sol.Ka_im=kfull*Kafull_im + kshort*Kashort_im;
  else
    sol.Ka_im.clear();

  sol.Kb=kfull*Kbfull + kshort*Kbshort;
  if(sol.Pb.n_rows == sol.Pb_im.n_rows && sol.Pb.n_cols == sol.Pb_im.n_cols)
    sol.Kb_im=kfull*Kbfull_im + kshort*Kbshort_im;
  else
    sol.Kb_im.clear();
#endif
#else
  // Hartree-Fock
#ifdef RESTRICTED
  sol.K=Kfull;
#else
  sol.Ka=Kafull;
  sol.Kb=Kbfull;
#endif
#endif

#ifdef DFT
  sol.en.Exc=0.0;
  if(dft.x_func>0 || dft.c_func>0) {
    if(verbose) {
      printf("Computing DFT exchange and correlation ... ");
      fflush(stdout);
      t.set();
    }
    
    double Nelnum; // Numerically integrated density
#ifdef RESTRICTED
    grid.eval_Fxc(dft.x_func,dft.c_func,sol.P,sol.XC,sol.en.Exc,Nelnum);
#else
    grid.eval_Fxc(dft.x_func,dft.c_func,sol.Pa,sol.Pb,sol.XCa,sol.XCb,sol.en.Exc,Nelnum);
#endif
    
#if defined(FULLHOLE)
    double rel_diff=(Nelnum+1.0-Nel)*100.0/Nel;
#elif defined(HALFHOLE)
    double rel_diff=(Nelnum+0.5-Nel)*100.0/Nel;
#else
    double rel_diff=(Nelnum-Nel)*100.0/Nel;
#endif
    
    if(verbose) {
      printf("done (%s)\n",t.elapsed().c_str());
      printf("Numerically integrated density is %.5f (%+.4f %%).\n",Nelnum,rel_diff);
    }
    
    if(fabs(rel_diff)>1e-2) {
      std::ostringstream oss;
      //      oss << "Density integrated over DFT grid differs from number of electrons by " << rel_diff << " %, i.e. " << Nelnum-Nel << " electrons.\n";
      oss << "Warning - numerically integrated density seems inaccurate.\n";
      if(verbose)
	std::cout << oss.str();
      //      throw std::runtime_error(oss.str());
    }
  }


  // Non-local correlation?
  if(dft.nl) {
    if(verbose) {
      printf("Computing non-local correlation ... ");
      fflush(stdout);
      t.set();
    }

#ifdef RESTRICTED
    grid.eval_VV10(nlgrid,dft.vv10_b,dft.vv10_C,sol.P,sol.XC,sol.en.Enl);
#else
    arma::mat XC(sol.XCa);
    XC.zeros();
    grid.eval_VV10(nlgrid,dft.vv10_b,dft.vv10_C,sol.P,XC,sol.en.Enl);
    sol.XCa+=XC;
    sol.XCb+=XC;
#endif

    if(verbose) {
      printf("done (%s)\n",t.elapsed().c_str());
    }
  }
#endif

  // Update Hamiltonian
#ifdef RESTRICTED
#ifdef DFT
  sol.H=Hcore+sol.J+sol.XC;
  // Add exact exchange if necessary
  if(kfull!=0.0 || kshort!=0.0) {
    sol.H-=0.5*sol.K;
    sol.en.Exc-=0.25*arma::trace(sol.P*sol.K);
    if(sol.P.n_rows == sol.P_im.n_rows && sol.P.n_cols == sol.P_im.n_cols)
      sol.en.Exc+=0.25*arma::trace(sol.P_im*sol.K_im);
  }

#else
  sol.H=Hcore+sol.J-0.5*sol.K;
  sol.en.Exc=-0.25*arma::trace(sol.P*sol.K);
  if(sol.P.n_rows == sol.P_im.n_rows && sol.P.n_cols == sol.P_im.n_cols)
    sol.en.Exc+=0.25*arma::trace(sol.P_im*sol.K_im);
#endif


#else // Unrestricted case

#ifdef DFT
  sol.Ha=Hcore+sol.J+sol.XCa;
  sol.Hb=Hcore+sol.J+sol.XCb;
  if(kshort!=0.0 || kfull!=0.0) {
    sol.Ha-=sol.Ka;
    sol.Hb-=sol.Kb;
    sol.en.Exc-=0.5*(arma::trace(sol.Pa*sol.Ka)+arma::trace(sol.Pb*sol.Kb));
    if(sol.Pa.n_rows == sol.Pa_im.n_rows && sol.Pa.n_cols == sol.Pa_im.n_cols)
      sol.en.Exc+=0.5*(arma::trace(sol.Pa_im*sol.Ka_im)+arma::trace(sol.Pb_im*sol.Kb_im));
  }
#else
  sol.Ha=Hcore+sol.J-sol.Ka;
  sol.Hb=Hcore+sol.J-sol.Kb;
  sol.en.Exc=-0.5*(arma::trace(sol.Pa*sol.Ka)+arma::trace(sol.Pb*sol.Kb));
  if(sol.Pa.n_rows == sol.Pa_im.n_rows && sol.Pa.n_cols == sol.Pa_im.n_cols)
    sol.en.Exc+=0.5*(arma::trace(sol.Pa_im*sol.Ka_im)+arma::trace(sol.Pb_im*sol.Kb_im));

#ifdef _ROHF
  // Constrain Fock operators to correspond to ROHF
  ROHF_update(sol.Ha,sol.Hb,sol.P,S,occa,occb,verbose);
#endif


#endif // end DFT clause
#endif // End unrestricted case


#if defined(FULLHOLE) || defined(HALFHOLE)
  if(freeze.size()>0) {
    // Freeze orbitals for TP/FCH/XCH calculation.
    if(spin)
      freeze_orbs(freeze,sol.Cb,S,sol.Hb,verbose);
    else
      freeze_orbs(freeze,sol.Ca,S,sol.Ha,verbose);
  }
#else
  // Normal case - freeze both alpha and beta spins.
  if(freeze.size()>0) {
#ifdef RESTRICTED
    freeze_orbs(freeze,sol.C,S,sol.H,verbose);
#else
    freeze_orbs(freeze,sol.Ca,S,sol.Ha,verbose);
    freeze_orbs(freeze,sol.Cb,S,sol.Hb,verbose);
#endif
  }
#endif // end TP clause

  fflush(stdout);

  // Energies
  sol.en.Ekin=arma::trace(sol.P*T);
  sol.en.Enuca=arma::trace(sol.P*Vnuc);
  sol.en.Enucr=Enuc;
  sol.en.Eone=arma::trace(sol.P*Hcore);
  sol.en.Ecoul=0.5*arma::trace(sol.P*sol.J);

  // Compute total energies
  sol.en.Eel=sol.en.Ecoul+sol.en.Exc+sol.en.Eone+sol.en.Enl;
  sol.en.E=sol.en.Eel+sol.en.Enucr;

  // Sanity checks
#ifdef RESTRICTED
  if(!arma::is_finite(sol.H)) {
    ERROR_INFO();
    sol.C.print("C");
    sol.P.print("P");
    sol.H.print("H");
    throw std::runtime_error("Fock operator is not finite.\n");
  }
#else
  if(!arma::is_finite(sol.Ha)) {
    ERROR_INFO();
    sol.Ca.print("Ca");
    sol.Cb.print("Cb");
    sol.Pa.print("Pa");
    sol.Pb.print("Pb");
    sol.Ha.print("Ha");
    sol.Hb.print("Hb");
    throw std::runtime_error("Alpha Fock operator is not finite.\n");
  }
  if(!arma::is_finite(sol.Hb)) {
    ERROR_INFO();
    sol.Ca.print("Ca");
    sol.Cb.print("Cb");
    sol.Pa.print("Pa");
    sol.Pb.print("Pb");
    sol.Ha.print("Ha");
    sol.Hb.print("Hb");
    throw std::runtime_error("Beta Fock operator is not finite.\n");
  }
#endif

  if(!std::isfinite(sol.en.E)) {
    ERROR_INFO();

    // Print out hamiltonians
#ifdef RESTRICTED
    sol.C.print("C");
    sol.P.print("P");
    sol.H.print("H");
    sol.P_im.print("P_im");
    sol.K_im.print("K_im");
#else
    sol.Ca.print("Ca");
    sol.Cb.print("Cb");
    sol.Pa.print("Pa");
    sol.Pb.print("Pb");
    sol.Ha.print("Ha");
    sol.Hb.print("Hb");
    sol.Pa_im.print("Pa_im");
    sol.Ka_im.print("Ka_im");
    sol.Pb_im.print("Pb_im");
    sol.Kb_im.print("Kb_im");
#endif

    printf("Coulomb      energy %e\n",sol.en.Ecoul);
    printf("XC           energy %e\n",sol.en.Exc);
    printf("One-electron energy %e\n",sol.en.Eone);
    printf("Non-local    energy %e\n",sol.en.Enl);
    printf("Nuclear repulsion energy %e\n",sol.en.Enucr);
    
    std::ostringstream oss;
    oss << "\nSomething wrong with total energy " << sol.en.E <<"?\nEnding program.\n";
    throw std::runtime_error(oss.str());
  }
}
