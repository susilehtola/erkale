/*
 *                This source code is part of
 *
 *                     E  R  K  A  L  E
 *                             -
 *                       HF/DFT from Hel
 *
 * Written by Susi Lehtola, 2010-2013
 * Copyright (c) 2010-2013, Susi Lehtola
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

/* Restricted case */
#if defined(RESTRICTED) && defined(DFT)
arma::vec SCF::force_RDFT(rscf_t & sol, const std::vector<double> & occs, const dft_t dft, DFTGrid & grid, DFTGrid & nlgrid, double tol)

#elif defined(RESTRICTED) && defined(HF)
arma::vec SCF::force_RHF(rscf_t & sol, const std::vector<double> & occs, double tol)

#elif defined(UNRESTRICTED) && defined(DFT)
arma::vec SCF::force_UDFT(uscf_t & sol, const std::vector<double> & occa, const std::vector<double> & occb, const dft_t dft, DFTGrid & grid, DFTGrid & nlgrid, double tol)

#elif defined(UNRESTRICTED) && defined(HF)
arma::vec SCF::force_UHF(uscf_t & sol, const std::vector<double> & occa, const std::vector<double> & occb, double tol)

#elif defined(UNRESTRICTED) && defined(_ROHF)
arma::vec SCF::force_ROHF(uscf_t & sol, int Nel_alpha, int Nel_beta, double tol)
#endif
{

  arma::mat W;
#ifdef RESTRICTED
  W=form_density(sol.E,sol.C,occs);
#else
  W=form_density(sol.Ea,sol.Ca,occa)+form_density(sol.Eb,sol.Cb,occb);
#endif

  // Compute force
  arma::vec fpul_kin=basisp->kinetic_pulay(sol.P);
  //    interpret_force(fpul_kin).print("Kinetic Pulay");

  arma::vec fpul_nuc=basisp->nuclear_pulay(sol.P);
  //    interpret_force(fpul_nuc).print("Nuclear Pulay");

  arma::vec fnuc=basisp->nuclear_der(sol.P);
  //    interpret_force(fnuc).print("Hellman-Feynman");

  arma::vec forth=basisp->overlap_der(W);
  //    interpret_force(forth).print("Orthonormality");

  arma::vec frep=basisp->nuclear_force();
  //    interpret_force(frep).print("Nuclear repulsion");

#ifdef DFT
  // Get range separation info
  double omega, kfull, kshort;
  range_separation(dft.x_func,omega,kfull,kshort);
#else
  double kfull=1.0;
#endif

  // Exact exchange and Coulomb
  arma::vec fx_full;
  fx_full.zeros(fnuc.n_elem);

#ifdef DFT      
  // Short-range exchange
  arma::vec fx_short;
  fx_short.zeros(fnuc.n_elem);

  if(kfull==0.0) {
      
    if(densityfit) {
      if(kshort!=0.0)
	throw std::runtime_error("Forces not implemented for range separation with density fitting.\n");
	
      fx_full=dfit.force_J(sol.P);
    } else {
      if(!direct)
	scr.fill(basisp,intthr,verbose);
      
      fx_full=scr.forceJ(sol.P,tol);
    }
  } else {
#endif
      
    if(!direct)
      scr.fill(basisp,intthr,verbose);
    
#ifdef RESTRICTED
    fx_full=scr.forceJK(sol.P,tol,kfull);
#else
    fx_full=scr.forceJK(sol.Pa,sol.Pb,tol,kfull);
#endif

#ifdef DFT
  }

  if(omega != 0.0) {
    // Set range separation and fill (low-cost compared to forces anyway)
    scr_rs.set_range_separation(omega,0.0,1.0);
    scr_rs.fill(basisp,intthr,verbose);
      
    // Exchange forces
#ifdef RESTRICTED
    fx_short=scr_rs.forceK(sol.P,tol,kshort);
#else
    fx_short=scr_rs.forceK(sol.Pa,sol.Pb,tol,kshort);
#endif
  }
    
  // Get the DFT contribution
  arma::vec fxc;
  fxc.zeros(fnuc.n_elem);
#ifdef RESTRICTED
  fxc=grid.eval_force(dft.x_func,dft.c_func,sol.P);
#else
  fxc=grid.eval_force(dft.x_func,dft.c_func,sol.Pa,sol.Pb);
#endif

  // Non-local contribution to force
  if(dft.nl) {
    arma::vec vv10f(grid.eval_VV10_force(nlgrid,dft.vv10_b,dft.vv10_C,sol.P));
    fxc+=vv10f;
  }

#endif // DFT

  arma::vec ftot=fpul_kin+fpul_nuc+fnuc+forth+frep;
  arma::vec ffull=ftot+fx_full;  
#ifdef DFT
  // DFT contribution
  ffull+=fxc+fx_short;
#endif

  //  interpret_force(fx_full).print("Coulomb + exact exchange");
  //  interpret_force(ftot).print("Total (w.o. 2-electron)");
  //  interpret_force(ffull).print("Total");
    
  return ffull;
}
