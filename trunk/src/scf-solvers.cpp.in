/*
 *                This source code is part of
 *
 *                     E  R  K  A  L  E
 *                             -
 *                       DFT from Hel
 *
 * Written by Susi Lehtola, 2010-2013
 * Copyright (c) 2010-2013, Susi Lehtola
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

#if defined(RESTRICTED) && defined(DFT)
void SCF::RDFT(rscf_t & sol, const std::vector<double> & occs, const convergence_t conv, const dft_t dft)

#elif defined(RESTRICTED) && defined(HF)
void SCF::RHF(rscf_t & sol, const std::vector<double> & occs, const convergence_t conv)

#elif defined(UNRESTRICTED) && defined(DFT)
void SCF::UDFT(uscf_t & sol, const std::vector<double> & occa, const std::vector<double> & occb, const convergence_t conv, const dft_t dft)

#elif defined(UNRESTRICTED) && defined(HF)
void SCF::UHF(uscf_t & sol, const std::vector<double> & occa, const std::vector<double> & occb, const convergence_t conv)

#elif defined(UNRESTRICTED) && defined(_ROHF)
void SCF::ROHF(uscf_t & sol, int Nel_alpha, int Nel_beta, const convergence_t conv)

#elif defined(DFT) && defined(FULLHOLE)
size_t XRSSCF::full_hole(size_t xcatom, uscf_t & sol, convergence_t conv, dft_t dft, bool xch)

#elif defined(DFT) && defined(HALFHOLE)
size_t XRSSCF::half_hole(size_t xcatom, uscf_t & sol, convergence_t conv, dft_t dft)
#endif
{

  /// Formation of Fock matrix
#ifdef RESTRICTED
#if defined(HF)
#define form_fock(sol,ref) Fock_RHF(sol,occs,ref,tol); nfock++;
#elif defined(DFT)
#define form_fock(sol,ref) Fock_RDFT(sol,occs,dft,ref,grid,tol); nfock++;
#endif

#else
  // Unrestricted case: first core excited states

#if defined(HALFHOLE)
#define form_fock(sol,ref) Fock_half_hole(sol,dft,occa,occb,ref,grid,tol); nfock++;
#elif defined(FULLHOLE)
#define form_fock(sol,ref) Fock_full_hole(sol,dft,occa,occb,ref,grid,tol); nfock++;

  // Conventional HF and DFT
#elif defined(HF)
#define form_fock(sol,ref) Fock_UHF(sol,occa,occb,ref,tol); nfock++;
#elif defined(_ROHF)
#define form_fock(sol,ref) Fock_ROHF(sol,Nel_alpha,Nel_beta,ref,tol); nfock++;
#elif defined(DFT)
#define form_fock(sol,ref) Fock_UDFT(sol,occa,occb,dft,ref,grid,tol); nfock++;
#endif
#endif

  /// Find excited orbital
#if defined(FULLHOLE) || defined(HALFHOLE)
#define find_exc(sol) if(spin) {ixc_orb=find_excited_orb(sol.Cb,*basisp,xcatom,noccb);} else {ixc_orb=find_excited_orb(sol.Ca,*basisp,xcatom,nocca);}
#endif

  /// Occupancy update
#if defined(FULLHOLE)
#define upd_occa() if(spin) {occa=norm_occ(nocca);} else { if(xch) {occa=xch_occ(ixc_orb,nocca);} else {occa=fch_occ(ixc_orb,nocca);} }
#define upd_occb() if(!spin) {occb=norm_occ(noccb);} else { if(xch) {occb=xch_occ(ixc_orb,noccb);} else {occb=fch_occ(ixc_orb,noccb);} }
#elif defined(HALFHOLE)
#define upd_occa() if(spin) {occa=norm_occ(nocca);} else { occa=tp_occ(ixc_orb,nocca);}
#define upd_occb() if(!spin) {occb=norm_occ(noccb);} else { occb=tp_occ(ixc_orb,noccb);}
#endif

  /// Density formation
#ifdef RESTRICTED
#define form_dens(sol) sol.P=form_density(sol.C,occs);
#else
#define form_dens_ur(sol) sol.Pa=form_density(sol.Ca,occa); sol.Pb=form_density(sol.Cb,occb); sol.P=sol.Pa+sol.Pb;

#if defined(HALFHOLE) || defined(FULLHOLE)
#define form_dens(sol) find_exc(sol); upd_occa(); upd_occb(); form_dens_ur(sol);
#else
#define form_dens(sol) form_dens_ur(sol)
#endif

#endif // ifdef RESTRICTED


#if defined(_ROHF)
  // Occupations. TODO - this does not apply for fractional occupations..
  std::vector<double> occa;
  std::vector<double> occb;
  occa=std::vector<double>(Nel_alpha,1.0);
  occb=std::vector<double>(Nel_beta,1.0);

#elif ( defined(HALFHOLE) || defined(FULLHOLE) )
  // Occupation vector of spin up and spin down
  std::vector<double> occa;
  std::vector<double> occb;
#endif

  // Determine number of occupied states
#if !defined(HALFHOLE) && !defined(FULLHOLE)

#ifdef _ROHF
  size_t nocca=Nel_alpha;
  size_t noccb=Nel_beta;
#elif defined(RESTRICTED)
  size_t nocc;
  for(nocc=occs.size()-1;nocc<occs.size();nocc--)
    if(occs[nocc]>0)
      break;
  nocc++;
#else
  size_t nocca;
  for(nocca=occa.size()-1;nocca<occa.size();nocca--)
    if(occa[nocca]>0)
      break;
  nocca++;

  size_t noccb;
  for(noccb=occb.size()-1;noccb<occb.size();noccb--)
    if(occb[noccb]>0)
      break;
  noccb++;
#endif
#endif

  int nfock=0;

  Timer t;
  Timer ttot;

  // DIIS error
  double diiserr;
  // Was DIIS succesful?
  bool diissucc=false;

  // Helper arrays
  arma::mat orbs;
  arma::mat Horth;

#ifdef RESTRICTED
  // DIIS iterator
  rDIIS diis(S,Sinvh,diisorder);
  // ADIIS
  rADIIS adiis;
  // TRDSM
  TRDSM trdsm(S);
  // Broyden
  Broyden broyd(verbose);

  // Coulomb and exchange matrices
  arma::mat J(Nbf,Nbf), K(Nbf,Nbf);
  J.zeros();
  K.zeros();
#else
  // DIIS iterator
  uDIIS diis(S,Sinvh,diisorder);
  // ADIIS
  uADIIS adiis;

  // TRDSM
  TRDSM trdsma(S);
  TRDSM trdsmb(S);

  // Broyden
  Broyden broyd_sum(verbose);
  Broyden broyd_diff(verbose);

#endif

  // Dipole moment
  arma::vec dipmom;
  double olddip;

  // Tolerance for screening and screening efficiency
  double tol;

  // Determine tolerance to use
  if(strictint)
    tol=STRICTTOL;
  else
    tol=ROUGHTOL;
  bool strict(strictint);

  // Change in energy from last iteration
  double deltaE=0;

  // Maximum and RMS differences of AO density matrix
  double rmsdiff=0.0, maxdiff=0.0;
#ifndef RESTRICTED
  double rmsdiffa=0.0, maxdiffa=0.0;
  double rmsdiffb=0.0, maxdiffb=0.0;
#endif

  if(verbose)
    printf("\n ******* Initialization of run ********\n");

#ifdef RESTRICTED
  if(sol.C.n_rows!=Nbf)
#else
    if(sol.Ca.n_rows!=Nbf || sol.Cb.n_rows!=Nbf)
#endif
      {

	if(guess!=COREGUESS)
	  throw std::runtime_error("No starting guess, and use of core guess disallowed!\n");

#ifdef RESTRICTED
	sol.H=Hcore;
#else
	sol.Ha=Hcore;
	sol.Hb=Hcore;
#endif

	diagonalize(S,Sinvh,sol);

	if(verbose)
	  printf("\nCore guess formed in %s.\n",t.elapsed().c_str());

      } else {
      // Got correctly sized input guess.

      if(verbose)
        printf("\nUsing input guess for orbitals.\n");
    }
  fflush(stdout);


#if defined(FULLHOLE) || defined(HALFHOLE)
  size_t ixc_orb=0;
#endif

  // Form the density matrix
  form_dens(sol);

  // Print orbital energies
  if(verbose) {
#ifdef RESTRICTED
    print_E(sol.E,occs);
#else
    printf("alpha: ");
    print_E(sol.Ea,occa);
    printf("beta:  ");
    print_E(sol.Eb,occb);
#endif
    fflush(stdout);
  }

  // Print occupancies
  if(verbose) {
#ifdef RESTRICTED
    printf("\nOrbital occupancies:\n");
    for(size_t i=0;i<occs.size();i++) {
      printf("%.3f ",occs[i]);
      if((i+1)%12==0 && i!=occs.size()-1)
	printf("\n");
    }
    printf("\n");
#else
    printf("\nAlpha orbital occupancies:\n");
    for(size_t i=0;i<occa.size();i++) {
      printf("%.3f ",occa[i]);
      if((i+1)%12==0 && i!=occa.size()-1)
	printf("\n");
    }
    printf("\n");
    printf("Beta orbital occupancies:\n");
    for(size_t i=0;i<occb.size();i++) {
      printf("%.3f ",occb[i]);
      if((i+1)%12==0 && i!=occb.size()-1)
	printf("\n");
    }
    printf("\n");
#endif
    fflush(stdout);
  }

#ifdef DFT
  // Fraction of exact exchange
  double kfrac=exact_exchange(dft.x_func);

  if(verbose) {
    if(kfrac!=0.0)
      printf("\nUsing hybrid exchange with % .3f of exact exchange.\n",kfrac*100);
    else
      printf("\nA pure exchange functional used, no exact exchange.\n");
  }

  DFTGrid grid(basisp,verbose,dft_lobatto);
#endif


  // Sparse output to stderr
  if(verbose) {
    fprintf(stderr,"Running ");
#if defined(RESTRICTED) || defined(_ROHF)
    fprintf(stderr,"restricted ");
#else
    fprintf(stderr,"unrestricted ");
#endif

#ifndef DFT
#ifdef _ROHF
    fprintf(stderr,"open-shell ");
#endif
    fprintf(stderr,"HF ");
#else
    if(dft.c_func>0) {
      // Correlation exists.
      fprintf(stderr,"%s-%s ",get_keyword(dft.x_func).c_str(),get_keyword(dft.c_func).c_str());
    } else
      fprintf(stderr,"%s ",get_keyword(dft.x_func).c_str());

    if(pz!=NO) {
      if(pz==PERT || pz==CANPERT)
	fprintf(stderr,"perturbative ");
      if(pz==CAN || pz==CANPERT)
	fprintf(stderr,"canonical ");
      fprintf(stderr,"SIC ");
    }
#endif

    fprintf(stderr,"calculation");
    if(densityfit) {
      fprintf(stderr," with density fitting");
    }

#ifdef DFT
#if (defined(FULLHOLE) || defined(HALFHOLE))
    if(densityfit)
      fprintf(stderr," and ");
    else
      fprintf(stderr," with ");
#ifdef FULLHOLE
    fprintf(stderr,"full core hole");
    if(xch)
      fprintf(stderr," (XCH)");
#else // half hole
    fprintf(stderr,"half core hole");
#endif
#endif

#endif // end DFT clause
    fprintf(stderr,".\n%4s %16s %10s  %9s  %9s  %8s %10s\n","iter","E","dE","RMS dens","MAX dens","dip mom","titer (s)");
  }
  fflush(stdout);

#ifdef DFT
  if(dft.adaptive) {
#ifdef RESTRICTED
    // Form DFT quadrature grid
    grid.construct(sol.P,dft.gridtol,dft.x_func,dft.c_func);
#else
    // Form DFT quadrature grid
    grid.construct(sol.Pa,sol.Pb,dft.gridtol,dft.x_func,dft.c_func);
#endif
  } else {
    // Fixed size grid
    grid.construct(dft.nrad,dft.lmax,dft.x_func,dft.c_func);
  }

  if(verbose) {
    fflush(stdout);
    fprintf(stderr,"%-64s %10.3f\n","    DFT grid formation",t.get());
  }
#endif // DFT

  // Has calculation been converged?
  bool converged=false;
  // How many consecutive iterations have seemed converged
  int convd=0;

  // Solution of last iteration
#ifdef RESTRICTED
  rscf_t oldsol;
#else
  uscf_t oldsol;
#endif
  oldsol.en.E=0.0;

  // Pad occupancies with zeros (needed e.g. in Casida routines)
#if !defined(RESTRICTED)
  std::vector<double> occar(occa), occbr(occb);
  while(occar.size()<Sinvh.n_cols)
    occar.push_back(0.0);
  while(occbr.size()<Sinvh.n_cols)
    occbr.push_back(0.0);
#else
  std::vector<double> occr(occs);
  while(occr.size()<Sinvh.n_cols)
    occr.push_back(0.0);
#endif

  // Write current matrices to checkpoint.
  // To use the file effectively, we keep it open for the whole shebang.
  chkptp->open();
  chkptp->write("P",sol.P);
  chkptp->write("S",S);
  chkptp->write("Sinvh",Sinvh);
  chkptp->write(sol.en);
#if !defined(RESTRICTED)
  chkptp->write("Ca",sol.Ca);
  chkptp->write("Cb",sol.Cb);

  chkptp->write("Ea",sol.Ea);
  chkptp->write("Eb",sol.Eb);

  chkptp->write("Pa",sol.Pa);
  chkptp->write("Pb",sol.Pb);

  chkptp->write("occa",occar);
  chkptp->write("occb",occbr);

  // Restricted
  chkptp->write("Restricted",0);
#else
  chkptp->write("C",sol.C);
  chkptp->write("E",sol.E);
  chkptp->write("occs",occr);
  // Unrestricted
  chkptp->write("Restricted",1);
#endif
  chkptp->write("Converged",converged);
  chkptp->write("tol",tol);
  chkptp->close();

  // Loop:
  int iiter=1;
  while(iiter<=maxiter) {
    Timer titer;

    if(verbose)
      printf("\n ******* Iteration %4i ********\n",iiter);

    // Form the Fock operator.
    if(strict || (!strict && iiter%5==1)) {
#ifdef RESTRICTED
      rscf_t refsol;
#else
      uscf_t refsol;
#endif
      if(iiter!=1 && !strict && verbose && !densityfit)
	printf("Restarting Fock matrix formation from scratch.\n");
      
      form_fock(sol,refsol);
    } else {
      form_fock(sol,oldsol);
    }

#ifdef DFT
    // Perdew-Zunger correction?
    if(pz==FULL || pz==CAN) {
      titer.stop();
#ifdef RESTRICTED
      PZSIC_RDFT(sol,occs,dft,grid,pz==CAN,pzloc);
#else
      PZSIC_UDFT(sol,occa,occb,dft,grid,pz==CAN,pzloc);
#endif
      titer.cont();
    }
#endif

    // Compute change of energy
    deltaE=sol.en.E-oldsol.en.E;

    // Update ADIIS stacks.
    if(useadiis) {
#ifdef RESTRICTED
      adiis.update(sol.P,sol.H,sol.en.E);
#else
      adiis.update(sol.Pa,sol.Pb,sol.Ha,sol.Hb,sol.en.E);
#endif
    }

    // Update TRDSM stacks
    if(usetrdsm) {
#ifdef RESTRICTED
      // Need to divide density by two for purification to make sense
      trdsm.push(sol.en.E,sol.P/2.0,sol.H);
#else
      trdsma.push(sol.en.E,sol.Pa,sol.Ha);
      trdsmb.push(sol.en.E,sol.Pb,sol.Hb);
#endif
    }

    if(iiter>1 && usebroyden) {
#ifdef RESTRICTED
      // Update Broyden mixer
      broyd.push_x(MatToVec(oldsol.H));
      broyd.push_f(MatToVec(oldsol.H-sol.H));
#else
      // Compute sum and difference
      arma::mat Hs=sol.Ha+sol.Hb;
      arma::mat Hd=sol.Ha-sol.Hb;

      arma::mat Hsold=oldsol.Ha+oldsol.Hb;
      arma::mat Hdold=oldsol.Ha-oldsol.Hb;

      // Update Broyden mixers
      broyd_sum.push_x(MatToVec(Hsold));
      broyd_sum.push_f(MatToVec(Hsold-Hs));

      broyd_diff.push_x(MatToVec(Hdold));
      broyd_diff.push_f(MatToVec(Hdold-Hd));
#endif
    }

    // Solve DIIS
    if(usediis) {

#ifdef RESTRICTED
      // Update DIIS stack of matrices
      diis.update(sol.H,sol.P,sol.en.E,diiserr);
#else
      // Update DIIS stacks of matrices
      diis.update(sol.Ha,sol.Hb,sol.Pa,sol.Pb,sol.en.E,diiserr);
#endif

      if(diiserr<diisthr) {
	if(verbose)
	  printf("\nUsing DIIS extrapolated Fock operator.\n");

#ifdef RESTRICTED
	// Solve new matrix
	diis.solve_F(sol.H,verbose,diis_c1);
#else
	// Solve new matrices
	diis.solve_F(sol.Ha,sol.Hb,verbose,diis_c1);
#endif

	diissucc=true;
      } else {
	if(verbose)
	  printf("\nDIIS error too large, not using DIIS extrapolation.\n");
	diissucc=false;
      }
    }

    // Perform ADIIS interpolation
    if(useadiis && ((usediis && !diissucc) || !usediis)) {

      if(verbose) {
	printf("Performing ADIIS interpolation of Fock operator ... ");
	fflush(stdout);
	t.set();
      }

      diissucc=true;
#ifdef RESTRICTED
      adiis.get_F(sol.H);
#else
      adiis.get_F(sol.Ha,sol.Hb);
#endif

      if(verbose)
	printf("done (%s)\n",t.elapsed().c_str());
    }

    // Perform TRDSM update
    if(usetrdsm) {
      if(verbose) {
	printf("Performing trust-region DSM update of Fock operator ... ");
	fflush(stdout);
	t.set();
      }
#ifdef RESTRICTED
      sol.H=trdsm.solve();
#else
      sol.Ha=trdsma.solve();
      sol.Hb=trdsmb.solve();
#endif

      if(verbose) {
	printf("done (%s)\n",t.elapsed().c_str());
	fflush(stdout);
      }
    }

    // Perform Broyden interpolation
    if(usebroyden && ((usediis && !diissucc) || !usediis) && iiter>1) {

      if(verbose) {
	printf("Performing Broyden interpolation of Fock operator ... ");
	fflush(stdout);
	t.set();
      }

#ifdef RESTRICTED
      // Update Hamiltonian
      sol.H=VecToMat(broyd.update_x(),Nbf,Nbf);
#else
      arma::mat Hs=VecToMat(broyd_sum.update_x(),Nbf,Nbf);
      arma::mat Hd=VecToMat(broyd_diff.update_x(),Nbf,Nbf);

      // Update Hamiltonians
      sol.Ha=0.5*(Hs+Hd);
      sol.Hb=0.5*(Hs-Hd);
#endif

      if(verbose)
	printf("done (%s)\n",t.elapsed().c_str());
    }

    // Save old solution
    oldsol=sol;

    if(linesearch) {
      // Do line search in the level shift to find the update

      // LH level shift
      double lmu=0.0;
      // RH level shift;
      const double rmuin=0.5;
      double rmu=rmuin;

      bool mufound=false;

      // Solutions
#ifdef RESTRICTED
      rscf_t lhsol(sol), oldrhsol, rhsol(sol);
      const rscf_t refsol(sol);
#else
      uscf_t lhsol(sol), oldrhsol, rhsol(sol);
      const uscf_t refsol(sol);
#endif
      // Form LH solution - no level shift
      diagonalize(S,Sinvh,lhsol);
      form_dens(lhsol);
      form_fock(lhsol,sol);
      diagonalize(S,Sinvh,lhsol);

      if(verbose) {
	printf("\nLine search for level shift\n");
	printf("\t%e\t%e\n",lmu,lhsol.en.E);
      }

      double minE=lhsol.en.E;

      // Find RH level shift
      while(true) {
	// Store old RH solution
	oldrhsol=rhsol;

#ifdef RESTRICTED
	rhsol.H=sol.H-rmu*S*sol.P*S;
#else
	rhsol.Ha=sol.Ha-rmu*S*sol.Pa*S;
	rhsol.Hb=sol.Hb-rmu*S*sol.Pb*S;
#endif
	diagonalize(S,Sinvh,rhsol);
	form_dens(rhsol);
	form_fock(rhsol,sol);
#ifdef DFT
	// Perdew-Zunger correction?
	if(pz==FULL || pz==CAN) {
	  titer.stop();
#ifdef RESTRICTED
	  PZSIC_RDFT(rhsol,occs,dft,grid,pz==CAN,pzloc);
#else
	  PZSIC_UDFT(rhsol,occa,occb,dft,grid,pz==CAN,pzloc);
#endif
	  titer.cont();
	}
#endif
	diagonalize(S,Sinvh,rhsol);

	if(verbose) {
	  printf("\t%e\t%e\t%e\n",rmu,rhsol.en.E,rhsol.en.E-lhsol.en.E);
	  fflush(stdout);
	}

	if(fabs(rhsol.en.E-lhsol.en.E)<conv.deltaEmax) {
	  sol=lhsol;
	  mufound=true;
	  break;
	}


	if(rhsol.en.E<minE) {
	  minE=rhsol.en.E;
	  // Update LH shift and solution
	  if(rmu!=rmuin) {
	    lhsol=oldrhsol;
	    lmu=rmu/2.0;
	  }
	  // and increase RH shift
	  rmu*=2.0;
	} else
	  break;
      }

      double Emin0=std::min(lhsol.en.E,rhsol.en.E);

      double oldE=0.0;

      // Use golden section search to find minimum
      const double tau=(sqrt(5.0)-1.0)/2.0;

      // Compute trials 1 and 2?
      bool comp1=true;
      bool comp2=true;

#ifdef RESTRICTED
      rscf_t sol1(sol), sol2(sol);
#else
      uscf_t sol1(sol), sol2(sol);
#endif

      if(!mufound)
	for(int imu=0;imu<10;imu++) {
	  // Compute new trials
	  double mu1=lmu+(1-tau)*(rmu-lmu);
	  double mu2=lmu+tau*(rmu-lmu);

	  // Do level shifts
#ifdef RESTRICTED
	  if(comp1)
	    sol1.H=refsol.H-mu1*S*refsol.P*S;
	  if(comp2)
	    sol2.H=refsol.H-mu2*S*refsol.P*S;
#else
	  if(comp1) {
	    sol1.Ha=refsol.Ha-mu1*S*refsol.Pa*S;
	    sol1.Hb=refsol.Hb-mu1*S*refsol.Pb*S;
	  }
	  if(comp2) {
	    sol2.Ha=refsol.Ha-mu2*S*refsol.Pa*S;
	    sol2.Hb=refsol.Hb-mu2*S*refsol.Pb*S;
	  }
#endif

	  // Compute energies
	  if(comp1) {
	    diagonalize(S,Sinvh,sol1);
	    form_dens(sol1);
	    form_fock(sol1,sol);
#ifdef DFT
	    // Perdew-Zunger correction?
	    if(pz==FULL || pz==CAN) {
	      titer.stop();
#ifdef RESTRICTED
	      PZSIC_RDFT(sol1,occs,dft,grid,pz==CAN,pzloc);
#else
	      PZSIC_UDFT(sol1,occa,occb,dft,grid,pz==CAN,pzloc);
#endif
	      titer.cont();
	    }
#endif
	    diagonalize(S,Sinvh,sol1);
	    if(verbose) {
	      printf("\t%e\t%e\t%e\n",mu1,sol1.en.E,sol1.en.E-Emin0);
	      fflush(stdout);
	    }
	  }

	  if(comp2) {
	    diagonalize(S,Sinvh,sol2);
	    form_dens(sol2);
	    form_fock(sol2,sol);
#ifdef DFT
	    // Perdew-Zunger correction?
	    if(pz==FULL || pz==CAN) {
	      titer.stop();
#ifdef RESTRICTED
	      PZSIC_RDFT(sol2,occs,dft,grid,pz==CAN,pzloc);
#else
	      PZSIC_UDFT(sol2,occa,occb,dft,grid,pz==CAN,pzloc);
#endif
	      titer.cont();
	    }
#endif
	    diagonalize(S,Sinvh,sol2);
	    if(verbose) {
	      printf("\t%e\t%e\t%e\n",mu2,sol2.en.E,sol2.en.E-Emin0);
	      fflush(stdout);
	    }
	  }

	  /*
	    fprintf(stderr,"mu: %e %e %e %e\n",lmu,mu1,mu2,rmu);
	    fprintf(stderr,"E: %e %e %e %e\n",lhsol.en.E,sol1.en.E,sol2.en.E,rhsol.en.E);
	  */

	  // Choose what to do
	  minE=std::min(std::min(lhsol.en.E,rhsol.en.E),std::min(sol1.en.E,sol2.en.E));

	  if(minE==lhsol.en.E) {
	    // probably converged
	    sol=lhsol;
	    break;
	  } else if(minE==rhsol.en.E) {
	    // probably converged
	    sol=rhsol;
	    break;
	  } else if(minE==sol1.en.E) {
	    // Move right limit closer
	    rmu=mu2;
	    rhsol=sol2;

	    // New solution 2 is old solution 1
	    sol2=sol1;
	    comp2=false;
	    comp1=true;

	    oldE=sol.en.E;
	    sol=sol1;
	  } else { // minE==sol2.en.E
	    // Move left limit closer
	    lmu=mu1;
	    lhsol=sol1;

	    // New solution 1 is old solution 2
	    sol1=sol2;
	    comp1=false;
	    comp2=true;

	    oldE=sol.en.E;
	    sol=sol2;
	  }

	  // Check convergence
	  if(oldE-sol.en.E<conv.deltaEmax)
	    break;

	}
    } else if(usetrrh) {

#ifdef RESTRICTED
      arma::mat Cnew;
      arma::vec Enew;
      TRRH_update(sol.H,sol.C,S,Cnew,Enew,nocc,shift,verbose);

      // Update solution
      sol.C=Cnew;
      sol.E=Enew;

      // Check orthonormality of orbitals
      check_orth(sol.C,S,false);
#else
      arma::mat Canew;
      arma::vec Eanew;
      TRRH_update(sol.Ha,sol.Ca,S,Canew,Eanew,nocca,shift,verbose);

      arma::mat Cbnew;
      arma::vec Ebnew;
      TRRH_update(sol.Hb,sol.Cb,S,Cbnew,Ebnew,noccb,shift,verbose);

      // Update solutions
      sol.Ca=Canew;
      sol.Cb=Cbnew;

      sol.Ea=Eanew;
      sol.Eb=Ebnew;

      // Check orthonormality of orbitals
      check_orth(sol.Ca,S,false);
      check_orth(sol.Cb,S,false);
#endif
    } else {

      // Solve FC=ESC
      if(verbose) {
	if(shift==0.0)
	  printf("\nSolving SCF equations ... ");
	else
	  printf("\nSolving SCF equations with level shift %.3f ... ",shift);
	fflush(stdout);
	t.set();
      }

      // Do the diagonalization
      diagonalize(S,Sinvh,sol,shift);

      if(verbose)
	printf("done (%s)\n",t.elapsed().c_str());
    }

    // Form new density matrix
    form_dens(sol);

#ifdef RESTRICTED
    arma::mat deltaP=sol.P-oldsol.P;
#else
    // Compute change of polarized densities
    arma::mat deltaPa=sol.Pa-oldsol.Pa;
    arma::mat deltaPb=sol.Pb-oldsol.Pb;
#endif

    // Compute dipole moment
    olddip=arma::norm(dipmom,2);
    dipmom=dipole_moment(sol.P,*basisp);

    // Compute convergence criteria
#ifdef RESTRICTED
    maxdiff=max_abs(deltaP);
    rmsdiff=rms_norm(deltaP);
#else
    maxdiffa=max_abs(deltaPa);
    maxdiffb=max_abs(deltaPb);

    rmsdiffa=rms_norm(deltaPa);
    rmsdiffb=rms_norm(deltaPb);

    maxdiff=std::max(maxdiffa,maxdiffb);
    rmsdiff=std::max(rmsdiffa,rmsdiffb);
    //    rmsdiff=sqrt(rmsdiffa*rmsdiffa+rmsdiffb*rmsdiffb)/2.0;
#endif

    // Print out status information
    if(verbose) {

#ifdef RESTRICTED
      print_E(sol.E,occs);
#else
      printf("alpha: ");
      print_E(sol.Ea,occa);
      printf("beta:  ");
      print_E(sol.Eb,occb);
#endif

      printf("\nDipole:\tx\t\ty\t\tz\t\tdipole change\n");
      printf("\t% 08.8f\t% 08.8f\t% 08.8f\t% e\n",dipmom(0),dipmom(1),dipmom(2),arma::norm(dipmom,2)-olddip);

      printf("Energy:\telectronic\ttotal\t\tvirial\t\tenergy change\n");
      printf("\t% 08.8f\t% 08.8f\t% 08.8f\t% g\n",sol.en.Eel,sol.en.E,-sol.en.E/sol.en.Ekin,deltaE);

#ifdef DFT
      printf("\tkinetic\t\tnuclear\t\tCoulomb\t\tXC\n");
#else
      // No correlation in Hartree-Fock!
      printf("\tkinetic\t\tnuclear\t\tCoulomb\t\tExchange\n");
#endif
      printf("\t% 08.8f\t% 08.8f\t% 08.8f\t% 08.8f\n",sol.en.Ekin,sol.en.Enuca,sol.en.Ecoul,sol.en.Exc);

#ifdef RESTRICTED
      if(usediis) {
	printf("Errors:\tMax dens\tRMS dens\tDIIS\n");
	printf("\t% e\t% e\t% e\n",maxdiff,rmsdiff,diiserr);
      } else {
	printf("Errors:\tMax dens\tRMS dens\n");
	printf("\t% e\t% e\n",maxdiff,rmsdiff);
      }
#else
      if(usediis) {
	printf("Errors:\tMax dens\tRMS dens\tDIIS\n");
	printf("alpha\t%e\t%e\t%e\n",maxdiffa,rmsdiffa,diiserr);
	printf("beta\t%e\t%e\n",maxdiffb,rmsdiffb);
      } else {
	printf("Errors:\tMax dens\tRMS dens\n");
	printf("alpha\t%e\t%e\n",maxdiffa,rmsdiffa);
	printf("beta\t%e\t%e\n",maxdiffb,rmsdiffb);
      }
#endif

      printf("\nIteration took %s.\n",titer.elapsed().c_str());
      fflush(stdout);
    }

    // Sparse output
    if(verbose) {
      fprintf(stderr,"%4i % 16.8f",iiter,sol.en.E);

      if(fabs(deltaE)<conv.deltaEmax)
	fprintf(stderr," % 10.3e*",deltaE);
      else
	fprintf(stderr," % 10.3e ",deltaE);

      if(rmsdiff<conv.deltaPrms)
	fprintf(stderr," %9.3e*",rmsdiff);
      else
	fprintf(stderr," %9.3e ",rmsdiff);

      if(maxdiff<conv.deltaPmax)
	fprintf(stderr," %9.3e*",maxdiff);
      else
	fprintf(stderr," %9.3e ",maxdiff);

      fprintf(stderr," %8.3f %10.3f\n",arma::norm(dipmom,2),titer.get());
    }

    if(fabs(deltaE)<conv.deltaEmax && maxdiff<conv.deltaPmax && rmsdiff<conv.deltaPrms) {
      // Increment amount of converged iterations
      convd++;

      if(convd>=2) {
	converged=true;

	if(verbose)
	  printf("\n ******* Convergence achieved ********\n");
      }
    } else {
      // Reset number of consecutive converged iterations
      convd=0;
    }

    // Write current matrices to checkpoint.
    // To use the file effectively, we keep it open for the whole shebang.
    chkptp->open();
    chkptp->write("P",sol.P);
    chkptp->write("S",S);
    chkptp->write("Sinvh",Sinvh);
    chkptp->write(sol.en);
#if !defined(RESTRICTED)
    chkptp->write("Ca",sol.Ca);
    chkptp->write("Cb",sol.Cb);

    chkptp->write("Ea",sol.Ea);
    chkptp->write("Eb",sol.Eb);

    chkptp->write("Ha",sol.Ha);
    chkptp->write("Hb",sol.Hb);

    chkptp->write("Pa",sol.Pa);
    chkptp->write("Pb",sol.Pb);

    chkptp->write("occa",occar);
    chkptp->write("occb",occbr);

    // Restricted
    chkptp->write("Restricted",0);
#else
    chkptp->write("C",sol.C);
    chkptp->write("E",sol.E);
    chkptp->write("H",sol.H);
    chkptp->write("occs",occr);
    // Unrestricted
    chkptp->write("Restricted",1);
#endif
    chkptp->write("Converged",converged);
    chkptp->write("tol",tol);
    chkptp->close();

    // Update screening value
    if(direct && !strict && !densityfit) {
      // adapted from molpro
      double newtol=std::min(std::min(fabs(conv.deltaEmax)*1e-2,FINETOL),tol);

      // Clear out old accelerator stacks
      if(tol!=newtol && rmsdiff<=TOLCHANGE) {
	if(verbose) {
	  printf("\nInitial convergence achieved. Turning off incremental formation.\n");
	  fflush(stdout);
	}
	diis.clear();
	adiis.clear();
#ifdef RESTRICTED
	broyd.clear();
#else
	broyd_sum.clear();
	broyd_diff.clear();
#endif
	// Set new tolerance
	tol=newtol;
      } else if(converged)
	break;
    } else if(converged)
      break;

    iiter++;
  } // End SCF cycle

    // Compute dipole moment
  if(verbose) {
    arma::vec dp=dipole_moment(sol.P,*basisp);
    printf("Dipole moment is (%f,%f,%f) D, |mu|=%f D.\n",dp[0]/AUINDEBYE,dp[1]/AUINDEBYE,dp[2]/AUINDEBYE,arma::norm(dp,2)/AUINDEBYE);
  }

  if(converged) {
    if(verbose) {
      std::string method=
#ifdef RESTRICTED
	"R"
#elif defined(_ROHF)
	"RO"
#else
	"U"
#endif
#ifdef DFT
	"DFT"
#else
	"HF"
#endif
	;

      printf("Solution of %s took %s.\n",method.c_str(),ttot.elapsed().c_str());
      fprintf(stderr,"%s converged in %s.\n",method.c_str(),ttot.elapsed().c_str());

      if(linesearch) {
	printf("Fock matrix was built %i times.\n",nfock);
	fprintf(stderr,"Fock matrix was built %i times.\n",nfock);
      }
    }

#ifdef DFT
    if(pz==PERT || pz==CANPERT) {
      // Calculate SIC correction
#ifdef RESTRICTED
      PZSIC_RDFT(sol,occs,dft,grid,pz==CANPERT,pzloc);
#else
      PZSIC_UDFT(sol,occa,occb,dft,grid,pz==CANPERT,pzloc);
#endif
      // Diagonalize to get new canonical orbitals and energies
      diagonalize(S,Sinvh,sol,shift);

      chkptp->open();
      chkptp->write(sol.en);
      chkptp->write("P",sol.P);
#if !defined(RESTRICTED)
      chkptp->write("Ca",sol.Ca);
      chkptp->write("Cb",sol.Cb);
      chkptp->write("Ea",sol.Ea);
      chkptp->write("Eb",sol.Eb);
      chkptp->write("Ha",sol.Ha);
      chkptp->write("Hb",sol.Hb);
      chkptp->write("Pa",sol.Pa);
      chkptp->write("Pb",sol.Pb);
#else
      chkptp->write("C",sol.C);
      chkptp->write("E",sol.E);
      chkptp->write("H",sol.H);
#endif
      chkptp->close();

      if(verbose) {
	fprintf(stderr,"ESIC % 16.8f\n",sol.en.E);
	printf("PZ-SIC corrected energy is % 16.8f\n",sol.en.E);

#ifdef RESTRICTED
	print_E(sol.E,occs);
#else
	printf("alpha: ");
	print_E(sol.Ea,occa);
	printf("beta:  ");
	print_E(sol.Eb,occb);
#endif
      }
    }
#endif

    if(doforce) {
      arma::vec f;
#if defined(RESTRICTED) && defined(HF)
      f=force_RHF(sol,occs,tol);
#endif
#if defined(UNRESTRICTED) && defined(HF)
      f=force_UHF(sol,occa,occb,tol);
#endif
#if defined(RESTRICTED) && defined(DFT)
      f=force_RDFT(sol,occs,dft,grid,tol);
#endif
#if defined(UNRESTRICTED) && defined(DFT)
      f=force_UDFT(sol,occa,occb,dft,grid,tol);
#endif
#if defined(_ROHF) || defined(FULLHOLE) || defined(HALFHOLE)
      ERROR_INFO();
      throw std::runtime_error("Forces not supported for this method.\n");
#endif

      chkptp->write("Force",f);
    }

  } else {
    std::ostringstream oss;
    oss << "Error in function " << __FUNCTION__ << " (file " << __FILE__ << ", near line " << __LINE__ << "): SCF did not converge in "<<maxiter<<" iterations!\n";
    throw std::runtime_error(oss.str());
  }

#if defined(HALFHOLE) || defined(FULLHOLE)
  return ixc_orb;
#endif
}
